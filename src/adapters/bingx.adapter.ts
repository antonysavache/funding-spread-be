// –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã BingX API
interface BingXTicker {
  symbol: string;           // "BTC-USDT"
  lastPrice: string;        // –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞
  markPrice?: string;       // mark —Ü–µ–Ω–∞ (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
  indexPrice?: string;      // –∏–Ω–¥–µ–∫—Å–Ω–∞—è —Ü–µ–Ω–∞
  fundingRate?: string;     // —Ç–µ–∫—É—â–∏–π funding rate  
  nextFundingTime?: number; // –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ funding
  openInterest?: string;    // –æ—Ç–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä–µ—Å
  volume?: string;          // –æ–±—ä–µ–º –∑–∞ 24—á
  time?: number;            // timestamp
}

interface BingXTickersResponse {
  code: number;
  msg: string;
  data: BingXTicker[];
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
import { NormalizedTicker } from './normalized-ticker.interface';

export class BingXAdapter {

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ BingX –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —É—á–µ—Ç–æ–º funding rates
   */
  static normalizeWithFunding(
    tickersResponse: BingXTickersResponse, 
    fundingData: {[symbol: string]: any}
  ): { [ticker: string]: NormalizedTicker } {
    console.log('üîç BingX –∞–¥–∞–ø—Ç–µ—Ä: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å funding rates...');

    if (tickersResponse.code !== 0 || !tickersResponse.data || !Array.isArray(tickersResponse.data)) {
      console.warn('BingX: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', tickersResponse);
      return {};
    }

    const result: { [ticker: string]: NormalizedTicker } = {};

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if (tickersResponse.data.length > 0) {
      const firstItem = tickersResponse.data[0];
      console.log('üîç BingX –∞–¥–∞–ø—Ç–µ—Ä: –ø–æ–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', Object.keys(firstItem));
      console.log('üîç BingX –∞–¥–∞–ø—Ç–µ—Ä: –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', firstItem);
    }

    console.log('üîç BingX –∞–¥–∞–ø—Ç–µ—Ä: funding data keys:', Object.keys(fundingData));

    tickersResponse.data.forEach((ticker, index) => {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BingX —Ñ–æ—Ä–º–∞—Ç BTC-USDT –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π BTCUSDT
      const standardSymbol = this.convertBingXSymbol(ticker.symbol);
      
      if (index < 3) {
        console.log(`üîç BingX –∞–¥–∞–ø—Ç–µ—Ä: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${ticker.symbol} -> ${standardSymbol}`);
        
        // –ò—â–µ–º funding rate –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        const fundingInfo = fundingData[ticker.symbol];
        if (fundingInfo) {
          console.log(`üîç BingX –∞–¥–∞–ø—Ç–µ—Ä: –Ω–∞–π–¥–µ–Ω funding –¥–ª—è ${ticker.symbol}:`, fundingInfo);
        } else {
          console.log(`üîç BingX –∞–¥–∞–ø—Ç–µ—Ä: funding –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${ticker.symbol}`);
        }
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      if (
        standardSymbol &&
        standardSymbol.endsWith('USDT') &&
        this.isValidTicker(standardSymbol) &&
        ticker.lastPrice
      ) {
        
        // –ü–æ–ª—É—á–∞–µ–º funding rate –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
        const fundingInfo = fundingData[ticker.symbol];
        let fundingRate = 0;
        let nextFundingTime = this.calculateNextFundingTime();
        
        if (fundingInfo && fundingInfo.lastFundingRate) {
          fundingRate = parseFloat(fundingInfo.lastFundingRate) || 0;
        }
        
        if (fundingInfo && fundingInfo.nextFundingTime) {
          nextFundingTime = parseInt(fundingInfo.nextFundingTime) || this.calculateNextFundingTime();
        }
        
        const price = parseFloat(ticker.markPrice || ticker.lastPrice);
        
        if (index < 3) {
          console.log(`‚úÖ BingX –∞–¥–∞–ø—Ç–µ—Ä: –¥–æ–±–∞–≤–ª—è–µ–º ${standardSymbol} —Å fundingRate=${fundingRate}`);
        }
        
        result[standardSymbol] = {
          ticker: standardSymbol,
          price: price,
          fundingRate: fundingRate,
          nextFundingTime: nextFundingTime
        };
      } else if (index < 3) {
        console.log(`‚ùå BingX –∞–¥–∞–ø—Ç–µ—Ä: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${ticker.symbol} - –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç`);
      }
    });

    console.log(`BingX –∞–¥–∞–ø—Ç–µ—Ä —Å funding: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Object.keys(result).length} —Ç–∏–∫–µ—Ä–æ–≤`);
    return result;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ BingX –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  static normalize(tickersResponse: BingXTickersResponse): { [ticker: string]: NormalizedTicker } {
    console.log('üîç BingX –∞–¥–∞–ø—Ç–µ—Ä: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö...');

    if (tickersResponse.code !== 0 || !tickersResponse.data || !Array.isArray(tickersResponse.data)) {
      console.warn('BingX: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', tickersResponse);
      return {};
    }

    const result: { [ticker: string]: NormalizedTicker } = {};

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if (tickersResponse.data.length > 0) {
      const firstItem = tickersResponse.data[0];
      console.log('üîç BingX –∞–¥–∞–ø—Ç–µ—Ä: –ø–æ–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', Object.keys(firstItem));
      console.log('üîç BingX –∞–¥–∞–ø—Ç–µ—Ä: –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', firstItem);
    }

    tickersResponse.data.forEach((ticker, index) => {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BingX —Ñ–æ—Ä–º–∞—Ç BTC-USDT –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π BTCUSDT
      const standardSymbol = this.convertBingXSymbol(ticker.symbol);
      
      if (index < 3) {
        console.log(`üîç BingX –∞–¥–∞–ø—Ç–µ—Ä: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${ticker.symbol} -> ${standardSymbol}`);
        console.log(`üîç BingX –∞–¥–∞–ø—Ç–µ—Ä: fundingRate = ${ticker.fundingRate}, nextFundingTime = ${ticker.nextFundingTime}`);
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      if (
        standardSymbol &&
        standardSymbol.endsWith('USDT') &&
        this.isValidTicker(standardSymbol) &&
        ticker.lastPrice
      ) {
        
        // –ï—Å–ª–∏ –Ω–µ—Ç fundingRate, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0 –∏ –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è
        const fundingRate = ticker.fundingRate ? parseFloat(ticker.fundingRate) : 0;
        const nextFundingTime = ticker.nextFundingTime || this.calculateNextFundingTime();
        const price = parseFloat(ticker.markPrice || ticker.lastPrice);
        
        if (index < 3) {
          console.log(`‚úÖ BingX –∞–¥–∞–ø—Ç–µ—Ä: –¥–æ–±–∞–≤–ª—è–µ–º ${standardSymbol} —Å fundingRate=${fundingRate}`);
        }
        
        result[standardSymbol] = {
          ticker: standardSymbol,
          price: price,
          fundingRate: fundingRate,
          nextFundingTime: nextFundingTime
        };
      } else if (index < 3) {
        console.log(`‚ùå BingX –∞–¥–∞–ø—Ç–µ—Ä: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${ticker.symbol} - –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç`);
      }
    });

    console.log(`BingX –∞–¥–∞–ø—Ç–µ—Ä: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Object.keys(result).length} —Ç–∏–∫–µ—Ä–æ–≤`);
    return result;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç BingX —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
   * BTC-USDT -> BTCUSDT
   * ETH-USDT -> ETHUSDT
   */
  private static convertBingXSymbol(bingxSymbol: string): string | null {
    if (!bingxSymbol) return null;

    // BingX –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç BASE-QUOTE
    const cleaned = bingxSymbol.replace('-', '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª—Å—è –≤–∞–ª–∏–¥–Ω—ã–π —Å–∏–º–≤–æ–ª
    if (cleaned.endsWith('USDT') && cleaned.length > 4) {
      return cleaned;
    }

    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–∏–∫–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ XXXUSDT
   */
  private static isValidTicker(ticker: string): boolean {
    const regex = /^[A-Z0-9]+USDT$/;
    return regex.test(ticker) && ticker.length > 4;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ funding –¥–ª—è BingX (–∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤: 00:00, 08:00, 16:00 UTC)
   */
  private static calculateNextFundingTime(): number {
    const now = new Date();
    const currentHour = now.getUTCHours();
    let nextFundingHour: number;

    if (currentHour < 8) {
      nextFundingHour = 8;
    } else if (currentHour < 16) {
      nextFundingHour = 16;
    } else {
      nextFundingHour = 24;
    }

    const nextFundingTime = new Date(now);
    nextFundingTime.setUTCHours(nextFundingHour % 24, 0, 0, 0);
    if (nextFundingHour === 24) {
      nextFundingTime.setUTCDate(nextFundingTime.getUTCDate() + 1);
    }

    return nextFundingTime.getTime();
  }
}
