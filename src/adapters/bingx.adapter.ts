// –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã BingX API
interface BingXTicker {
  symbol: string;           // "BTC-USDT"
  lastPrice: string;        // –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞
  markPrice?: string;       // mark —Ü–µ–Ω–∞ (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
  indexPrice?: string;      // –∏–Ω–¥–µ–∫—Å–Ω–∞—è —Ü–µ–Ω–∞
  fundingRate?: string;     // —Ç–µ–∫—É—â–∏–π funding rate  
  nextFundingTime?: number; // –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ funding
  openInterest?: string;    // –æ—Ç–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä–µ—Å
  volume?: string;          // –æ–±—ä–µ–º –∑–∞ 24—á
  time?: number;            // timestamp
}

interface BingXTickersResponse {
  code: number;
  msg: string;
  data: BingXTicker[];
}

// –ù–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ø—Ä–µ–º–∏—É–º –∏–Ω–¥–µ–∫—Å–∞ (funding rate endpoint)
interface BingXPremiumIndex {
  symbol: string;           // "BTC-USDT"
  markPrice: string;        // mark —Ü–µ–Ω–∞
  indexPrice: string;       // –∏–Ω–¥–µ–∫—Å–Ω–∞—è —Ü–µ–Ω–∞
  fundingRate: string;      // —Ç–µ–∫—É—â–∏–π funding rate
  nextFundingTime: number;  // –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ funding –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  time: number;             // timestamp
}

interface BingXPremiumIndexResponse {
  code: number;
  msg: string;
  data: BingXPremiumIndex;
}

// –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
interface BingXContract {
  symbol: string;           // "BTC-USDT"
  status: string;           // —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤
  baseAsset: string;        // –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ "BTC"
  quoteAsset: string;       // –∫–æ—Ç–∏—Ä—É–µ–º—ã–π –∞–∫—Ç–∏–≤ "USDT"
  settlementAsset: string;  // –∞–∫—Ç–∏–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ "USDT"
  contractSize: string;     // —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  tickSize: string;         // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Ü–µ–Ω—ã
  timeInForce: string[];    // —Ç–∏–ø—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ä–¥–µ—Ä–∞
}

interface BingXContractsResponse {
  code: number;
  msg: string;
  data: BingXContract[];
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
import { NormalizedTicker } from './normalized-ticker.interface';

export class BingXAdapter {

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ BingX –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
   */
  static normalize(tickersResponse: BingXTickersResponse): { [ticker: string]: NormalizedTicker } {
    console.log('üîç BingX –∞–¥–∞–ø—Ç–µ—Ä (—Å—Ç–∞—Ä—ã–π): –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö...');

    if (tickersResponse.code !== 0 || !tickersResponse.data || !Array.isArray(tickersResponse.data)) {
      console.warn('BingX: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', tickersResponse);
      return {};
    }

    const result: { [ticker: string]: NormalizedTicker } = {};

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if (tickersResponse.data.length > 0) {
      const firstItem = tickersResponse.data[0];
      console.log('üîç BingX –∞–¥–∞–ø—Ç–µ—Ä (—Å—Ç–∞—Ä—ã–π): –ø–æ–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', Object.keys(firstItem));
      console.log('üîç BingX –∞–¥–∞–ø—Ç–µ—Ä (—Å—Ç–∞—Ä—ã–π): –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', firstItem);
    }

    tickersResponse.data.forEach((ticker, index) => {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BingX —Ñ–æ—Ä–º–∞—Ç BTC-USDT –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π BTCUSDT
      const standardSymbol = this.convertBingXSymbol(ticker.symbol);
      
      if (index < 3) {
        console.log(`üîç BingX –∞–¥–∞–ø—Ç–µ—Ä (—Å—Ç–∞—Ä—ã–π): –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${ticker.symbol} -> ${standardSymbol}`);
        console.log(`üîç BingX –∞–¥–∞–ø—Ç–µ—Ä (—Å—Ç–∞—Ä—ã–π): fundingRate = ${ticker.fundingRate}, nextFundingTime = ${ticker.nextFundingTime}`);
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      if (
        standardSymbol &&
        standardSymbol.endsWith('USDT') &&
        this.isValidTicker(standardSymbol) &&
        ticker.lastPrice
      ) {
        
        // –ï—Å–ª–∏ –Ω–µ—Ç fundingRate, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0 –∏ –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è
        const fundingRate = ticker.fundingRate ? parseFloat(ticker.fundingRate) : 0;
        const nextFundingTime = ticker.nextFundingTime || this.calculateNextFundingTime();
        const price = parseFloat(ticker.markPrice || ticker.lastPrice);
        
        if (index < 3) {
          console.log(`‚úÖ BingX –∞–¥–∞–ø—Ç–µ—Ä (—Å—Ç–∞—Ä—ã–π): –¥–æ–±–∞–≤–ª—è–µ–º ${standardSymbol} —Å fundingRate=${fundingRate}`);
        }
        
        result[standardSymbol] = {
          ticker: standardSymbol,
          price: price,
          fundingRate: fundingRate,
          nextFundingTime: nextFundingTime
        };
      } else if (index < 3) {
        console.log(`‚ùå BingX –∞–¥–∞–ø—Ç–µ—Ä (—Å—Ç–∞—Ä—ã–π): –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${ticker.symbol} - –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç`);
      }
    });

    console.log(`BingX –∞–¥–∞–ø—Ç–µ—Ä (—Å—Ç–∞—Ä—ã–π): –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Object.keys(result).length} —Ç–∏–∫–µ—Ä–æ–≤`);
    return result;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–º–∏—É–º –∏–Ω–¥–µ–∫—Å–∞ (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è funding rates)
   */
  static normalizePremiumIndex(premiumResponse: BingXPremiumIndexResponse): NormalizedTicker | null {
    if (premiumResponse.code !== 0 || !premiumResponse.data) {
      console.warn('BingX: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–µ–º–∏—É–º –∏–Ω–¥–µ–∫—Å–∞:', premiumResponse);
      return null;
    }

    const data = premiumResponse.data;
    const standardSymbol = this.convertBingXSymbol(data.symbol);

    if (!standardSymbol || !standardSymbol.endsWith('USDT')) {
      return null;
    }

    return {
      ticker: standardSymbol,
      price: parseFloat(data.markPrice),
      fundingRate: parseFloat(data.fundingRate),
      nextFundingTime: data.nextFundingTime
    };
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
   */
  static normalizeContracts(contractsResponse: BingXContractsResponse): string[] {
    if (contractsResponse.code !== 0 || !contractsResponse.data || !Array.isArray(contractsResponse.data)) {
      console.warn('BingX: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:', contractsResponse);
      return [];
    }

    return contractsResponse.data
      .filter(contract => 
        contract.symbol && 
        contract.symbol.includes('-USDT') &&
        contract.status === 'TRADING'
      )
      .map(contract => contract.symbol);
  }

  /**
   * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç funding rates –∏ price data (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–∏—Å–µ)
   */
  static combineFundingAndPrice(
    symbol: string,
    fundingData: any,
    priceData: any
  ): NormalizedTicker | null {
    const standardSymbol = this.convertBingXSymbol(symbol);

    if (!standardSymbol || !standardSymbol.endsWith('USDT')) {
      return null;
    }

    if (!fundingData || !priceData) {
      return null;
    }

    const fundingRate = fundingData.fundingRate ? parseFloat(fundingData.fundingRate) : 0;
    const price = parseFloat(priceData.lastPrice || priceData.markPrice || '0');
    const nextFundingTime = fundingData.nextFundingTime || this.calculateNextFundingTime();

    if (price <= 0) {
      return null;
    }

    return {
      ticker: standardSymbol,
      price: price,
      fundingRate: fundingRate,
      nextFundingTime: nextFundingTime
    };
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç BingX —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
   * BTC-USDT -> BTCUSDT
   * ETH-USDT -> ETHUSDT
   */
  private static convertBingXSymbol(bingxSymbol: string): string | null {
    if (!bingxSymbol) return null;

    // BingX –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç BASE-QUOTE
    const cleaned = bingxSymbol.replace('-', '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª—Å—è –≤–∞–ª–∏–¥–Ω—ã–π —Å–∏–º–≤–æ–ª
    if (cleaned.endsWith('USDT') && cleaned.length > 4) {
      return cleaned;
    }

    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–∏–∫–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ XXXUSDT
   */
  private static isValidTicker(ticker: string): boolean {
    const regex = /^[A-Z0-9]+USDT$/;
    return regex.test(ticker) && ticker.length > 4;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ funding –¥–ª—è BingX (–∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤: 00:00, 08:00, 16:00 UTC)
   */
  private static calculateNextFundingTime(): number {
    const now = new Date();
    const currentHour = now.getUTCHours();
    let nextFundingHour: number;

    if (currentHour < 8) {
      nextFundingHour = 8;
    } else if (currentHour < 16) {
      nextFundingHour = 16;
    } else {
      nextFundingHour = 24;
    }

    const nextFundingTime = new Date(now);
    nextFundingTime.setUTCHours(nextFundingHour % 24, 0, 0, 0);
    if (nextFundingHour === 24) {
      nextFundingTime.setUTCDate(nextFundingTime.getUTCDate() + 1);
    }

    return nextFundingTime.getTime();
  }
}
