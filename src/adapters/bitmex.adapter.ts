// –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã BitMEX API
interface BitMEXInstrument {
  symbol: string;           // "XBTUSD", "ETHUSD"
  typ: string;              // "FFWCSX" –¥–ª—è perpetual contracts
  lastPrice?: number;       // –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞
  markPrice?: number;       // mark —Ü–µ–Ω–∞
  indicativePrice?: number; // –∏–Ω–¥–µ–∫—Å–Ω–∞—è —Ü–µ–Ω–∞
  fundingRate?: number;     // —Ç–µ–∫—É—â–∏–π funding rate
  fundingTimestamp?: string; // –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ funding
  state: string;            // "Open", "Closed"
  listing?: string;         // –¥–∞—Ç–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞
  settle?: string;          // –¥–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞
}

interface BitMEXFunding {
  timestamp: string;        // –≤—Ä–µ–º—è funding
  symbol: string;           // —Å–∏–º–≤–æ–ª
  fundingInterval: string;  // –∏–Ω—Ç–µ—Ä–≤–∞–ª
  fundingRate: number;      // —Å—Ç–∞–≤–∫–∞ funding
  fundingRateDaily: number; // –¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞
}

interface BitMEXInstrumentsResponse {
  data?: BitMEXInstrument[];
}

interface BitMEXFundingResponse {
  data?: BitMEXFunding[];
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
import { NormalizedTicker } from './normalized-ticker.interface';

export class BitMEXAdapter {

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ BitMEX –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å funding rates
   */
  static normalizeWithFunding(
    instrumentsData: BitMEXInstrument[],
    fundingData: {[symbol: string]: BitMEXFunding}
  ): { [ticker: string]: NormalizedTicker } {
    console.log('üîç BitMEX –∞–¥–∞–ø—Ç–µ—Ä: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å funding rates...');

    if (!instrumentsData || !Array.isArray(instrumentsData)) {
      console.warn('BitMEX: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', instrumentsData);
      return {};
    }

    const result: { [ticker: string]: NormalizedTicker } = {};

    console.log('üîç BitMEX –∞–¥–∞–ø—Ç–µ—Ä: funding data keys:', Object.keys(fundingData));

    instrumentsData.forEach((instrument, index) => {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BitMEX —Ñ–æ—Ä–º–∞—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
      const standardSymbol = this.convertBitMEXSymbol(instrument.symbol);
      
      if (index < 3) {
        console.log(`üîç BitMEX –∞–¥–∞–ø—Ç–µ—Ä: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${instrument.symbol} -> ${standardSymbol}`);
        console.log(`üîç BitMEX –∞–¥–∞–ø—Ç–µ—Ä: typ = ${instrument.typ}, state = ${instrument.state}`);
        
        // –ò—â–µ–º funding rate –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        const fundingInfo = fundingData[instrument.symbol];
        if (fundingInfo) {
          console.log(`üîç BitMEX –∞–¥–∞–ø—Ç–µ—Ä: –Ω–∞–π–¥–µ–Ω funding –¥–ª—è ${instrument.symbol}:`, fundingInfo);
        } else {
          console.log(`üîç BitMEX –∞–¥–∞–ø—Ç–µ—Ä: funding –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${instrument.symbol}`);
        }
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT perpetual contracts —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      if (
        standardSymbol &&
        standardSymbol.endsWith('USDT') &&
        this.isValidTicker(standardSymbol) &&
        this.isPerpetualContract(instrument) &&
        instrument.state === 'Open' &&
        (instrument.lastPrice || instrument.markPrice)
      ) {
        
        // –ü–æ–ª—É—á–∞–µ–º funding rate –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
        const fundingInfo = fundingData[instrument.symbol];
        let fundingRate = 0;
        let nextFundingTime = this.calculateNextFundingTime();
        
        if (fundingInfo && fundingInfo.fundingRate !== undefined) {
          fundingRate = fundingInfo.fundingRate;
        }
        
        const price = instrument.markPrice || instrument.lastPrice || 0;
        
        if (index < 10) {
          console.log(`‚úÖ BitMEX –∞–¥–∞–ø—Ç–µ—Ä: –¥–æ–±–∞–≤–ª—è–µ–º ${standardSymbol} —Å fundingRate=${fundingRate}`);
        }
        
        result[standardSymbol] = {
          ticker: standardSymbol,
          price: price,
          fundingRate: fundingRate,
          nextFundingTime: nextFundingTime
        };
      } else if (index < 3) {
        console.log(`‚ùå BitMEX –∞–¥–∞–ø—Ç–µ—Ä: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${instrument.symbol} -> ${standardSymbol} - –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç`);
      }
    });

    console.log(`BitMEX –∞–¥–∞–ø—Ç–µ—Ä —Å funding: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Object.keys(result).length} —Ç–∏–∫–µ—Ä–æ–≤`);
    return result;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ BitMEX –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–±–µ–∑ funding rates)
   */
  static normalize(instrumentsData: BitMEXInstrument[]): { [ticker: string]: NormalizedTicker } {
    console.log('üîç BitMEX –∞–¥–∞–ø—Ç–µ—Ä: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö...');

    if (!instrumentsData || !Array.isArray(instrumentsData)) {
      console.warn('BitMEX: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', instrumentsData);
      return {};
    }

    const result: { [ticker: string]: NormalizedTicker } = {};

    instrumentsData.forEach((instrument, index) => {
      const standardSymbol = this.convertBitMEXSymbol(instrument.symbol);
      
      if (index < 3) {
        console.log(`üîç BitMEX –∞–¥–∞–ø—Ç–µ—Ä: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${instrument.symbol} -> ${standardSymbol}`);
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT perpetual contracts —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      if (
        standardSymbol &&
        standardSymbol.endsWith('USDT') &&
        this.isValidTicker(standardSymbol) &&
        this.isPerpetualContract(instrument) &&
        instrument.state === 'Open' &&
        (instrument.lastPrice || instrument.markPrice)
      ) {
        
        const fundingRate = instrument.fundingRate || 0;
        const nextFundingTime = this.calculateNextFundingTime();
        const price = instrument.markPrice || instrument.lastPrice || 0;
        
        if (index < 3) {
          console.log(`‚úÖ BitMEX –∞–¥–∞–ø—Ç–µ—Ä: –¥–æ–±–∞–≤–ª—è–µ–º ${standardSymbol} —Å fundingRate=${fundingRate}`);
        }
        
        result[standardSymbol] = {
          ticker: standardSymbol,
          price: price,
          fundingRate: fundingRate,
          nextFundingTime: nextFundingTime
        };
      } else if (index < 3) {
        console.log(`‚ùå BitMEX –∞–¥–∞–ø—Ç–µ—Ä: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${instrument.symbol} - –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç`);
      }
    });

    console.log(`BitMEX –∞–¥–∞–ø—Ç–µ—Ä: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Object.keys(result).length} —Ç–∏–∫–µ—Ä–æ–≤`);
    return result;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç BitMEX —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
   * XBTUSD -> BTCUSDT
   * ETHUSD -> ETHUSDT
   * SOLUSD -> SOLUSDT
   */
  private static convertBitMEXSymbol(bitmexSymbol: string): string | null {
    if (!bitmexSymbol) return null;

    // BitMEX –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–æ–±—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    const symbolMap: { [key: string]: string } = {
      'XBTUSD': 'BTCUSDT',
      'ETHUSD': 'ETHUSDT', 
      'SOLUSD': 'SOLUSDT',
      'ADAUSD': 'ADAUSDT',
      'XRPUSD': 'XRPUSDT',
      'LTCUSD': 'LTCUSDT',
      'LINKUSD': 'LINKUSDT',
      'DOGEUSD': 'DOGEUSDT',
      'AVAXUSD': 'AVAXUSDT',
      'DOTUSD': 'DOTUSDT'
    };

    // –ü—Ä—è–º–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    if (symbolMap[bitmexSymbol]) {
      return symbolMap[bitmexSymbol];
    }

    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ USD, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ USDT
    if (bitmexSymbol.endsWith('USD') && bitmexSymbol.length > 3) {
      const base = bitmexSymbol.slice(0, -3);
      return base + 'USDT';
    }

    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è perpetual contract
   */
  private static isPerpetualContract(instrument: BitMEXInstrument): boolean {
    // BitMEX perpetual contracts –∏–º–µ—é—Ç typ = "FFWCSX"
    return instrument.typ === 'FFWCSX' || 
           instrument.symbol.includes('USD') && !instrument.settle;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–∏–∫–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ XXXUSDT
   */
  private static isValidTicker(ticker: string): boolean {
    const regex = /^[A-Z0-9]+USDT$/;
    return regex.test(ticker) && ticker.length > 4;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ funding –¥–ª—è BitMEX (–∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤: 00:00, 08:00, 16:00 UTC)
   */
  private static calculateNextFundingTime(): number {
    const now = new Date();
    const currentHour = now.getUTCHours();
    let nextFundingHour: number;

    if (currentHour < 8) {
      nextFundingHour = 8;
    } else if (currentHour < 16) {
      nextFundingHour = 16;
    } else {
      nextFundingHour = 24;
    }

    const nextFundingTime = new Date(now);
    nextFundingTime.setUTCHours(nextFundingHour % 24, 0, 0, 0);
    if (nextFundingHour === 24) {
      nextFundingTime.setUTCDate(nextFundingTime.getUTCDate() + 1);
    }

    return nextFundingTime.getTime();
  }
}
