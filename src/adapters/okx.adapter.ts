// –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã OKX API v5
interface OKXFundingRate {
  instId: string;          // Instrument ID - —Å–∏–º–≤–æ–ª
  fundingRate: string;     // Current funding rate
  nextFundingRate?: string; // Next funding rate
  fundingTime: string;     // Next funding time timestamp
}

interface OKXMarkPrice {
  instId: string;     // Instrument ID
  markPx: string;     // Mark price
  ts: string;         // Timestamp
}

interface OKXTicker {
  instId: string;     // Instrument ID
  last: string;       // Last traded price
  markPx?: string;    // Mark price (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
  idxPx?: string;     // Index price  
  fundingRate?: string; // –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
  nextFundingRate?: string; // –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
  fundingTime?: string; // –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
  ts: string;         // Timestamp
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
  lastSz?: string;
  askPx?: string;
  askSz?: string;
  bidPx?: string;
  bidSz?: string;
  open24h?: string;
  high24h?: string;
  low24h?: string;
  volCcy24h?: string;
  vol24h?: string;
  sodUtc0?: string;
  sodUtc8?: string;
}

interface OKXFundingResponse {
  code: string;
  msg: string;
  data: OKXFundingRate[];
}

interface OKXMarkPriceResponse {
  code: string;
  msg: string;
  data: OKXMarkPrice[];
}

interface OKXTickersResponse {
  code: string;
  msg: string;
  data: OKXTicker[];
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
import { NormalizedTicker } from './normalized-ticker.interface';

export class OKXAdapter {

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ OKX v5 API –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç tickers endpoint –∫–æ—Ç–æ—Ä—ã–π –ú–û–ñ–ï–¢ —Å–æ–¥–µ—Ä–∂–∞—Ç—å funding rates
   */
  static normalize(tickersResponse: OKXTickersResponse): { [ticker: string]: NormalizedTicker } {

    if (!tickersResponse.data || !Array.isArray(tickersResponse.data)) {
      console.warn('OKX: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
      return {};
    }

    const result: { [ticker: string]: NormalizedTicker } = {};
    console.log(`üîç OKX –∞–¥–∞–ø—Ç–µ—Ä: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${tickersResponse.data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤...`);

    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ funding rates
    const sampleElements = tickersResponse.data.slice(0, 3);
    sampleElements.forEach((ticker, index) => {
      console.log(`üîç OKX sample ${index + 1}:`, {
        instId: ticker.instId,
        last: ticker.last,
        markPx: ticker.markPx,
        fundingRate: ticker.fundingRate,
        fundingTime: ticker.fundingTime,
        nextFundingRate: ticker.nextFundingRate,
        allFields: Object.keys(ticker)
      });
    });

    tickersResponse.data.forEach((ticker, index) => {
      const standardSymbol = this.convertOKXSymbol(ticker.instId);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      if (
        standardSymbol &&
        standardSymbol.endsWith('USDT') &&
        this.isValidTicker(standardSymbol) &&
        (ticker.markPx || ticker.last)
      ) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å funding rate –∏–∑ tickers - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ 0
        const fundingRate = ticker.fundingRate ? parseFloat(ticker.fundingRate) : 0;
        const price = parseFloat(ticker.markPx || ticker.last);
        const nextFundingTime = ticker.fundingTime ? 
          this.parseOKXTimestamp(ticker.fundingTime) : 
          this.calculateNextFundingTime();

        result[standardSymbol] = {
          ticker: standardSymbol,
          price: price,
          fundingRate: fundingRate,
          nextFundingTime: nextFundingTime
        };

        if (index < 5) {
          console.log(`‚úÖ OKX –∞–¥–∞–ø—Ç–µ—Ä: –¥–æ–±–∞–≤–∏–ª–∏ ${standardSymbol}:`, {
            price,
            fundingRate: (fundingRate * 100).toFixed(6) + '%',
            hasFundingInSource: !!ticker.fundingRate,
            nextFunding: new Date(nextFundingTime).toLocaleTimeString()
          });
        }
      }
    });

    console.log(`OKX –∞–¥–∞–ø—Ç–µ—Ä: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Object.keys(result).length} —Ç–∏–∫–µ—Ä–æ–≤`);
    return result;
  }

  /**
   * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ endpoints
   */
  static normalizeFundingRates(
    fundingResponse: OKXFundingResponse,
    tickersResponse: OKXTickersResponse
  ): { [ticker: string]: NormalizedTicker } {
    
    if (!fundingResponse.data || !tickersResponse.data) {
      console.warn('OKX: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API');
      return {};
    }

    console.log(`üîç OKX –∞–¥–∞–ø—Ç–µ—Ä: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${fundingResponse.data.length} funding rates –∏ ${tickersResponse.data.length} —Ç–∏–∫–µ—Ä–æ–≤...`);

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ü–µ–Ω –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º
    const priceMap = new Map<string, OKXTicker>();
    tickersResponse.data.forEach((ticker, index) => {
      const standardSymbol = this.convertOKXSymbol(ticker.instId);
      if (standardSymbol) {
        priceMap.set(standardSymbol, ticker);
        if (index < 3) {
          console.log(`üîç OKX —Ü–µ–Ω—ã: ${ticker.instId} -> ${standardSymbol}, —Ü–µ–Ω–∞: ${ticker.last}`);
        }
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É funding rates –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º
    const fundingMap = new Map<string, OKXFundingRate>();
    fundingResponse.data.forEach((funding, index) => {
      const standardSymbol = this.convertOKXSymbol(funding.instId);
      if (standardSymbol) {
        fundingMap.set(standardSymbol, funding);
        if (index < 3) {
          console.log(`üîç OKX funding: ${funding.instId} -> ${standardSymbol}, rate: ${funding.fundingRate}, time: ${funding.fundingTime}`);
        }
      }
    });

    const result: { [ticker: string]: NormalizedTicker } = {};

    fundingResponse.data.forEach((funding, index) => {
      const standardSymbol = this.convertOKXSymbol(funding.instId);
      const ticker = priceMap.get(standardSymbol || '');
      
      if (index < 3) {
        console.log(`üîç OKX –∞–¥–∞–ø—Ç–µ—Ä: —ç–ª–µ–º–µ–Ω—Ç ${index + 1}:`, {
          instId: funding.instId,
          standardSymbol: standardSymbol,
          hasStandardSymbol: !!standardSymbol,
          endsWithUSDT: standardSymbol?.endsWith('USDT'),
          hasFundingRate: !!funding.fundingRate,
          hasTicker: !!ticker,
          hasPrice: !!(ticker?.last),
          fundingRateValue: funding.fundingRate,
          priceValue: ticker?.last
        });
      }
      
      if (
        standardSymbol &&
        ticker &&
        standardSymbol.endsWith('USDT') &&
        this.isValidTicker(standardSymbol) &&
        funding.fundingRate !== undefined &&
        ticker.last
      ) {
        const fundingRate = parseFloat(funding.fundingRate) || 0;
        const price = parseFloat(ticker.last);
        const nextFundingTime = funding.fundingTime ? 
          this.parseOKXTimestamp(funding.fundingTime) : 
          this.calculateNextFundingTime();

        result[standardSymbol] = {
          ticker: standardSymbol,
          price: price,
          fundingRate: fundingRate,
          nextFundingTime: nextFundingTime
        };

        if (index < 10) {
          console.log(`‚úÖ OKX –∞–¥–∞–ø—Ç–µ—Ä: –¥–æ–±–∞–≤–∏–ª–∏ ${standardSymbol}:`, {
            price,
            fundingRate: (fundingRate * 100).toFixed(4) + '%',
            nextFunding: new Date(nextFundingTime).toLocaleTimeString()
          });
        }
      } else if (index < 3) {
        console.log(`‚ùå OKX –∞–¥–∞–ø—Ç–µ—Ä: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${funding.instId} -> ${standardSymbol} - –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é`);
      }
    });

    console.log(`OKX –∞–¥–∞–ø—Ç–µ—Ä (funding): –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Object.keys(result).length} —Ç–∏–∫–µ—Ä–æ–≤`);
    return result;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç OKX —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
   * BTC-USDT-SWAP -> BTCUSDT
   * ETH-USDT-SWAP -> ETHUSDT
   */
  private static convertOKXSymbol(okxSymbol: string): string | null {
    if (!okxSymbol) return null;

    // –£–¥–∞–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å -SWAP –∏ –∑–∞–º–µ–Ω—è–µ–º - –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    const cleaned = okxSymbol.replace('-SWAP', '').replace('-', '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª—Å—è –≤–∞–ª–∏–¥–Ω—ã–π —Å–∏–º–≤–æ–ª
    if (cleaned.endsWith('USDT') && cleaned.length > 4) {
      return cleaned;
    }

    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–∏–∫–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ XXXUSDT
   */
  private static isValidTicker(ticker: string): boolean {
    const regex = /^[A-Z0-9]+USDT$/;
    return regex.test(ticker) && ticker.length > 4;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç timestamp OKX (–æ–±—ã—á–Ω–æ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
   */
  private static parseOKXTimestamp(timestamp: string): number {
    if (!timestamp) {
      return this.calculateNextFundingTime();
    }

    const ts = parseInt(timestamp);
    if (!isNaN(ts)) {
      // OKX –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      return ts;
    }

    return this.calculateNextFundingTime();
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ mark-price endpoint —Å —É—á–µ—Ç–æ–º funding rates
   */
  static normalizeMarkPriceWithFunding(
    markPriceResponse: OKXMarkPriceResponse, 
    fundingData: {[instId: string]: any}
  ): { [ticker: string]: NormalizedTicker } {
    
    if (!markPriceResponse.data || !Array.isArray(markPriceResponse.data)) {
      console.warn('OKX: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç mark-price API');
      return {};
    }

    console.log(`üîç OKX –∞–¥–∞–ø—Ç–µ—Ä: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${markPriceResponse.data.length} mark prices —Å funding data...`);
    console.log('üîç OKX –∞–¥–∞–ø—Ç–µ—Ä: funding data keys:', Object.keys(fundingData));

    const result: { [ticker: string]: NormalizedTicker } = {};

    markPriceResponse.data.forEach((markPrice, index) => {
      const standardSymbol = this.convertOKXSymbol(markPrice.instId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      if (index < 3) {
        console.log(`üîç OKX mark-price+funding: —ç–ª–µ–º–µ–Ω—Ç ${index + 1}:`, {
          instId: markPrice.instId,
          standardSymbol: standardSymbol,
          hasInstId: !!markPrice.instId,
          endsWithUSDT: standardSymbol?.endsWith('USDT'),
          hasMarkPx: !!markPrice.markPx,
          markPxValue: markPrice.markPx,
          hasFundingData: !!fundingData[markPrice.instId]
        });

        if (fundingData[markPrice.instId]) {
          console.log(`üîç OKX funding info for ${markPrice.instId}:`, fundingData[markPrice.instId]);
        }
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      if (
        standardSymbol &&
        standardSymbol.endsWith('USDT') &&
        this.isValidTicker(standardSymbol) &&
        markPrice.markPx
      ) {
        const price = parseFloat(markPrice.markPx);
        
        // –ü–æ–ª—É—á–∞–µ–º funding rate –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
        const fundingInfo = fundingData[markPrice.instId];
        let fundingRate = 0;
        let nextFundingTime = this.calculateNextFundingTime();
        
        if (fundingInfo && fundingInfo.fundingRate) {
          fundingRate = parseFloat(fundingInfo.fundingRate) || 0;
        }
        
        if (fundingInfo && fundingInfo.fundingTime) {
          nextFundingTime = parseInt(fundingInfo.fundingTime) || this.calculateNextFundingTime();
        }

        result[standardSymbol] = {
          ticker: standardSymbol,
          price: price,
          fundingRate: fundingRate,
          nextFundingTime: nextFundingTime
        };

        if (index < 10) {
          console.log(`‚úÖ OKX mark-price+funding: –¥–æ–±–∞–≤–∏–ª–∏ ${standardSymbol}:`, {
            price,
            fundingRate: (fundingRate * 100).toFixed(4) + '%',
            nextFunding: new Date(nextFundingTime).toLocaleTimeString()
          });
        }
      } else if (index < 3) {
        console.log(`‚ùå OKX mark-price+funding: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${markPrice.instId} -> ${standardSymbol} - –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é`);
      }
    });

    console.log(`OKX –∞–¥–∞–ø—Ç–µ—Ä (mark-price+funding): –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Object.keys(result).length} —Ç–∏–∫–µ—Ä–æ–≤`);
    return result;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ mark-price endpoint
   * Mark price endpoint –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã, –±–µ–∑ funding rates
   * –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω—É–ª–µ–≤—ã–µ funding rates
   */
  static normalizeMarkPrice(markPriceResponse: OKXMarkPriceResponse): { [ticker: string]: NormalizedTicker } {
    
    if (!markPriceResponse.data || !Array.isArray(markPriceResponse.data)) {
      console.warn('OKX: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç mark-price API');
      return {};
    }

    console.log(`üîç OKX –∞–¥–∞–ø—Ç–µ—Ä: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${markPriceResponse.data.length} mark prices...`);

    const result: { [ticker: string]: NormalizedTicker } = {};

    markPriceResponse.data.forEach((markPrice, index) => {
      const standardSymbol = this.convertOKXSymbol(markPrice.instId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      if (index < 3) {
        console.log(`üîç OKX mark-price: —ç–ª–µ–º–µ–Ω—Ç ${index + 1}:`, {
          instId: markPrice.instId,
          standardSymbol: standardSymbol,
          hasInstId: !!markPrice.instId,
          endsWithUSDT: standardSymbol?.endsWith('USDT'),
          hasMarkPx: !!markPrice.markPx,
          markPxValue: markPrice.markPx
        });
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      if (
        standardSymbol &&
        standardSymbol.endsWith('USDT') &&
        this.isValidTicker(standardSymbol) &&
        markPrice.markPx
      ) {
        const price = parseFloat(markPrice.markPx);
        const fundingRate = 0; // Mark price endpoint –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç funding rate, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
        const nextFundingTime = this.calculateNextFundingTime();

        result[standardSymbol] = {
          ticker: standardSymbol,
          price: price,
          fundingRate: fundingRate,
          nextFundingTime: nextFundingTime
        };

        if (index < 10) {
          console.log(`‚úÖ OKX mark-price: –¥–æ–±–∞–≤–∏–ª–∏ ${standardSymbol}:`, {
            price,
            fundingRate: (fundingRate * 100).toFixed(4) + '%',
            nextFunding: new Date(nextFundingTime).toLocaleTimeString()
          });
        }
      } else if (index < 3) {
        console.log(`‚ùå OKX mark-price: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${markPrice.instId} -> ${standardSymbol} - –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é`);
      }
    });

    console.log(`OKX –∞–¥–∞–ø—Ç–µ—Ä (mark-price): –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Object.keys(result).length} —Ç–∏–∫–µ—Ä–æ–≤`);
    return result;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ funding –¥–ª—è OKX (–∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤: 00:00, 08:00, 16:00 UTC)
   */
  private static calculateNextFundingTime(): number {
    const now = new Date();
    const currentHour = now.getUTCHours();
    let nextFundingHour: number;

    if (currentHour < 8) {
      nextFundingHour = 8;
    } else if (currentHour < 16) {
      nextFundingHour = 16;
    } else {
      nextFundingHour = 24; // 00:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
    }

    const nextFundingTime = new Date(now);
    nextFundingTime.setUTCHours(nextFundingHour % 24, 0, 0, 0);
    if (nextFundingHour === 24) {
      nextFundingTime.setUTCDate(nextFundingTime.getUTCDate() + 1);
    }

    return nextFundingTime.getTime();
  }
}
