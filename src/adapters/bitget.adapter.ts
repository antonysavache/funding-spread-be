// –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã BitGet API v2
interface BitGetFundingRate {
  symbol: string;
  fundingRate: string;
  fundingTime: string;
}

interface BitGetTicker {
  symbol: string;
  lastPr: string;        // –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞
  indexPrice: string;    // –∏–Ω–¥–µ–∫—Å–Ω–∞—è —Ü–µ–Ω–∞  
  markPrice: string;     // mark —Ü–µ–Ω–∞
  openUtc: string;
  chgUtc: string;
  fundingRate: string;   // —Ç–µ–∫—É—â–∏–π funding rate
  nextFundingTime?: string; // –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
  askPr?: string;
  bidPr?: string;
  high24h?: string;
  low24h?: string;
  ts?: string;
  change24h?: string;
  baseVolume?: string;
  quoteVolume?: string;
  usdtVolume?: string;
  changeUtc24h?: string;
  holdingAmount?: string;
  deliveryStartTime?: any;
  deliveryTime?: any;
  deliveryStatus?: string;
  open24h?: string;
}

interface BitGetFundingResponse {
  code: string;
  msg: string; 
  requestTime: number;
  data: BitGetFundingRate[];
}

interface BitGetTickersResponse {
  code: string;
  msg: string;
  requestTime: number;
  data: BitGetTicker[];
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
import { NormalizedTicker } from './normalized-ticker.interface';

export class BitGetAdapter {

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ BitGet v2 API –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç  
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π API v2 endpoint –¥–ª—è funding rates
   */
  static normalize(tickersResponse: BitGetTickersResponse): { [ticker: string]: NormalizedTicker } {

    if (!tickersResponse.data || !Array.isArray(tickersResponse.data)) {
      console.warn('BitGet: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
      return {};
    }

    const result: { [ticker: string]: NormalizedTicker } = {};
    console.log(`üîç BitGet –∞–¥–∞–ø—Ç–µ—Ä: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${tickersResponse.data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤...`);

    tickersResponse.data.forEach((ticker, index) => {
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
      if (index < 3) {
        console.log(`üîç BitGet –∞–¥–∞–ø—Ç–µ—Ä: —ç–ª–µ–º–µ–Ω—Ç ${index + 1}:`, {
          symbol: ticker.symbol,
          hasSymbol: !!ticker.symbol,
          endsWithUSDT: ticker.symbol?.endsWith('USDT'),
          hasFundingRate: !!ticker.fundingRate,
          hasMarkPrice: !!ticker.markPrice,
          hasLastPr: !!ticker.lastPr,
          hasNextFundingTime: !!ticker.nextFundingTime,
          fundingRateValue: ticker.fundingRate,
          markPriceValue: ticker.markPrice,
          lastPrValue: ticker.lastPr
        });
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      if (
        ticker.symbol &&
        ticker.symbol.endsWith('USDT') &&
        this.isValidTicker(ticker.symbol) &&
        ticker.fundingRate !== undefined &&
        (ticker.markPrice || ticker.lastPr)
      ) {
        const fundingRate = parseFloat(ticker.fundingRate) || 0;
        const price = parseFloat(ticker.markPrice || ticker.lastPr);
        const nextFundingTime = ticker.nextFundingTime ? 
          this.parseNextFundingTime(ticker.nextFundingTime) : 
          this.calculateNextFundingTime();

        result[ticker.symbol] = {
          ticker: ticker.symbol,
          price: price,
          fundingRate: fundingRate,
          nextFundingTime: nextFundingTime
        };

        if (index < 3) {
          console.log(`‚úÖ BitGet –∞–¥–∞–ø—Ç–µ—Ä: –¥–æ–±–∞–≤–∏–ª–∏ ${ticker.symbol}:`, {
            price,
            fundingRate: (fundingRate * 100).toFixed(4) + '%',
            nextFunding: new Date(nextFundingTime).toLocaleTimeString()
          });
        }
      } else if (index < 3) {
        console.log(`‚ùå BitGet –∞–¥–∞–ø—Ç–µ—Ä: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${ticker.symbol} - –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é`);
      }
    });

    console.log(`BitGet –∞–¥–∞–ø—Ç–µ—Ä: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Object.keys(result).length} —Ç–∏–∫–µ—Ä–æ–≤`);
    return result;
  }

  /**
   * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è funding rate endpoint
   */
  static normalizeFundingRates(
    fundingResponse: BitGetFundingResponse,
    tickersResponse: BitGetTickersResponse
  ): { [ticker: string]: NormalizedTicker } {
    
    if (!fundingResponse.data || !tickersResponse.data) {
      console.warn('BitGet: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API');
      return {};
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É funding rates
    const fundingMap = new Map(
      fundingResponse.data.map(item => [item.symbol, item])
    );

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ü–µ–Ω
    const priceMap = new Map(
      tickersResponse.data.map(item => [item.symbol, item])
    );

    const result: { [ticker: string]: NormalizedTicker } = {};

    fundingResponse.data.forEach(funding => {
      const ticker = priceMap.get(funding.symbol);
      
      if (
        ticker &&
        funding.symbol.endsWith('USDT') &&
        this.isValidTicker(funding.symbol) &&
        funding.fundingRate &&
        ticker.markPrice
      ) {
        result[funding.symbol] = {
          ticker: funding.symbol,
          price: parseFloat(ticker.markPrice || ticker.lastPr),
          fundingRate: parseFloat(funding.fundingRate),
          nextFundingTime: this.parseNextFundingTime(funding.fundingTime)
        };
      }
    });

    console.log(`BitGet –∞–¥–∞–ø—Ç–µ—Ä (funding): –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Object.keys(result).length} —Ç–∏–∫–µ—Ä–æ–≤`);
    return result;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–∏–∫–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ XXXUSDT
   */
  private static isValidTicker(ticker: string): boolean {
    // –î–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ USDT –∏ –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º 1 —Å–∏–º–≤–æ–ª –¥–æ USDT
    const regex = /^[A-Z0-9]+USDT$/;
    return regex.test(ticker) && ticker.length > 4; // –±–æ–ª–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 1 + USDT)
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ funding –∏–∑ —Å—Ç—Ä–æ–∫–∏ BitGet
   */
  private static parseNextFundingTime(timeString: string): number {
    if (!timeString) {
      return this.calculateNextFundingTime();
    }

    // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å timestamp
    const timestamp = parseInt(timeString);
    if (!isNaN(timestamp)) {
      return timestamp;
    }

    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    return this.calculateNextFundingTime();
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ funding –¥–ª—è BitGet (–∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤: 00:00, 08:00, 16:00 UTC)
   */
  private static calculateNextFundingTime(): number {
    const now = new Date();
    const currentHour = now.getUTCHours();
    let nextFundingHour: number;

    if (currentHour < 8) {
      nextFundingHour = 8;
    } else if (currentHour < 16) {
      nextFundingHour = 16;
    } else {
      nextFundingHour = 24; // 00:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
    }

    const nextFundingTime = new Date(now);
    nextFundingTime.setUTCHours(nextFundingHour % 24, 0, 0, 0);
    if (nextFundingHour === 24) {
      nextFundingTime.setUTCDate(nextFundingTime.getUTCDate() + 1);
    }

    return nextFundingTime.getTime();
  }
}
