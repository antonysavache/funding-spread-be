import { Injectable, Logger } from '@nestjs/common';
import axios from 'axios';
import { BitMEXAdapter } from '../adapters/bitmex.adapter';
import { NormalizedTicker } from '../adapters/normalized-ticker.interface';

@Injectable()
export class BitMEXService {
  private readonly logger = new Logger(BitMEXService.name);
  private readonly baseUrl = 'https://www.bitmex.com/api/v1';

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å BitMEX –∏—Å–ø–æ–ª—å–∑—É—è –¥–≤–∞ endpoint:
   * - instrument/active –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —Ü–µ–Ω
   * - funding –¥–ª—è —Ç–µ–∫—É—â–∏—Ö funding rates
   */
  async getFundingData(): Promise<{ [ticker: string]: NormalizedTicker }> {
    this.logger.log('üîÑ BitMEX: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É funding –¥–∞–Ω–Ω—ã—Ö...');

    try {
      // BitMEX API endpoints
      const instrumentsUrl = `${this.baseUrl}/instrument/active`;
      
      this.logger.log(`üåê BitMEX: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç ${instrumentsUrl}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ü–µ–Ω
      const instrumentsResponse = await axios.get(instrumentsUrl, { 
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      
      this.logger.log(`üì• BitMEX: –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å ${instrumentsResponse.status}`);
      this.logger.log(`‚úÖ BitMEX: –ü–æ–ª—É—á–µ–Ω–æ ${instrumentsResponse.data?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      if (instrumentsResponse.data && instrumentsResponse.data.length > 0) {
        this.logger.log('üîç BitMEX: –ü–µ—Ä–≤—ã–µ 3 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:', instrumentsResponse.data.slice(0, 3).map(inst => ({
          symbol: inst.symbol,
          typ: inst.typ,
          state: inst.state,
          settlCurrency: inst.settlCurrency,
          lastPrice: inst.lastPrice,
          markPrice: inst.markPrice
        })));
      }

      // –ü–æ–ª—É—á–∞–µ–º funding rates –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      const fundingData = await this.getFundingRates();

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const normalizedData = BitMEXAdapter.normalizeWithFunding(instrumentsResponse.data, fundingData);
      const tickers = Object.keys(normalizedData);
      
      this.logger.log(`üîç BitMEX: –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ perpetual contracts: ${tickers.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
      this.logger.log(`üéØ BitMEX: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tickers.length} —Ç–∏–∫–µ—Ä–æ–≤:`, tickers.slice(0, 10));
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (tickers.length > 0) {
        tickers.slice(0, 3).forEach(ticker => {
          const data = normalizedData[ticker];
          this.logger.log(`üìä BitMEX ${ticker}:`, {
            price: data.price,
            fundingRate: (data.fundingRate * 100).toFixed(4) + '%',
            nextFunding: new Date(data.nextFundingTime).toLocaleTimeString()
          });
        });
      }

      return normalizedData;
    } catch (error) {
      this.logger.error('‚ùå BitMEX: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', {
        message: error.message,
        code: error.code,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        url: error.config?.url
      });
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
      this.logger.error('‚ùå BitMEX: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ funding rates –¥–ª—è –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö perpetual –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  private async getFundingRates(): Promise<{[symbol: string]: any}> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º funding rates –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å—Ä–∞–∑—É
      this.logger.log(`üìä BitMEX: –ü–æ–ª—É—á–∞–µ–º funding rates –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
      
      const fundingUrl = `${this.baseUrl}/funding?reverse=true&count=500`;
      
      const response = await axios.get(fundingUrl, {
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      const fundingData: {[symbol: string]: any} = {};
      
      if (response.data && Array.isArray(response.data)) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π funding rate –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
        const fundingBySymbol = new Map();
        
        response.data.forEach(fundingEntry => {
          const symbol = fundingEntry.symbol;
          if (!fundingBySymbol.has(symbol) || 
              new Date(fundingEntry.timestamp) > new Date(fundingBySymbol.get(symbol).timestamp)) {
            fundingBySymbol.set(symbol, fundingEntry);
          }
        });
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Map –≤ –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
        fundingBySymbol.forEach((value, key) => {
          fundingData[key] = value;
        });
        
        this.logger.log(`‚úÖ BitMEX: –ü–æ–ª—É—á–µ–Ω–æ funding rates –¥–ª—è ${Object.keys(fundingData).length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const symbols = Object.keys(fundingData).slice(0, 5);
        symbols.forEach(symbol => {
          const funding = fundingData[symbol];
          this.logger.log(`üìà BitMEX funding ${symbol}: rate=${(funding.fundingRate * 100).toFixed(4)}%, time=${funding.timestamp}`);
        });
      }

      return fundingData;
    } catch (error) {
      this.logger.error(`‚ùå BitMEX: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ funding rates: ${error.message}`);
      return {};
    }
  }
}
