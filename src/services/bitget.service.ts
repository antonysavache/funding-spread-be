import { Injectable, Logger } from '@nestjs/common';
import axios from 'axios';
import { BitGetAdapter } from '../adapters/bitget.adapter';
import { NormalizedTicker } from '../adapters/normalized-ticker.interface';

@Injectable()
export class BitGetService {
  private readonly logger = new Logger(BitGetService.name);
  private readonly baseUrl = 'https://api.bitget.com';

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å BitGet –∏—Å–ø–æ–ª—å–∑—É—è API v2
   */
  async getFundingData(): Promise<{ [ticker: string]: NormalizedTicker }> {
    this.logger.log('üîÑ BitGet: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É funding –¥–∞–Ω–Ω—ã—Ö...');

    try {
      // BitGet API v2 endpoints
      const tickersUrl = `${this.baseUrl}/api/v2/mix/market/tickers?productType=usdt-futures`;

      this.logger.log(`üåê BitGet: –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ ${tickersUrl}`);

      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ tickers endpoint (—Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
      const response = await axios.get(tickersUrl, { 
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      
      this.logger.log(`üì• BitGet: –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å ${response.status}`);
      this.logger.log(`üìÑ BitGet: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:`, {
        keys: Object.keys(response.data),
        code: response.data.code,
        msg: response.data.msg,
        dataLength: response.data.data?.length || 0
      });
      
      if (response.data.code !== '00000') {
        this.logger.error(`‚ùå BitGet: API –æ—à–∏–±–∫–∞ - –∫–æ–¥: ${response.data.code}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${response.data.msg}`);
        throw new Error(`BitGet API error: ${response.data.msg}`);
      }

      this.logger.log(`‚úÖ BitGet: –ü–æ–ª—É—á–µ–Ω–æ ${response.data.data?.length || 0} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      if (response.data.data && response.data.data.length > 0) {
        this.logger.log('üîç BitGet: –ü–µ—Ä–≤—ã–µ 3 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:', response.data.data.slice(0, 3));
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º response –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
      const tickersResponse = {
        code: response.data.code,
        msg: response.data.msg,
        requestTime: response.data.requestTime,
        data: response.data.data || []
      };

      const normalizedData = BitGetAdapter.normalize(tickersResponse);
      const tickers = Object.keys(normalizedData);
      
      this.logger.log(`üéØ BitGet: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tickers.length} —Ç–∏–∫–µ—Ä–æ–≤:`, tickers.slice(0, 10));
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (tickers.length > 0) {
        tickers.slice(0, 3).forEach(ticker => {
          const data = normalizedData[ticker];
          this.logger.log(`üìä BitGet ${ticker}:`, {
            price: data.price,
            fundingRate: (data.fundingRate * 100).toFixed(4) + '%',
            nextFunding: new Date(data.nextFundingTime).toLocaleTimeString()
          });
        });
      } else {
        this.logger.warn('‚ö†Ô∏è BitGet: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞');
      }

      return normalizedData;
    } catch (error) {
      this.logger.error('‚ùå BitGet: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', {
        message: error.message,
        code: error.code,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        url: error.config?.url
      });
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
      this.logger.error('‚ùå BitGet: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      return {};
    }
    }
  }
