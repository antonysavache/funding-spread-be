import { Injectable, Logger } from '@nestjs/common';
import axios from 'axios';
import { NormalizedTicker } from '../adapters/normalized-ticker.interface';

@Injectable()
export class BitGetService {
  private readonly logger = new Logger(BitGetService.name);
  private readonly baseUrl = 'https://api.bitget.com';

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å BitGet –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π funding rate API
   */
  async getFundingData(): Promise<{ [ticker: string]: NormalizedTicker }> {
    this.logger.log('üîÑ BitGet: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É funding –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API...');

    try {
      // –ù–æ–≤—ã–π endpoint —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ funding
      const fundingUrl = `${this.baseUrl}/api/v2/mix/market/current-fund-rate?productType=usdt-futures`;

      this.logger.log(`üåê BitGet: –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ ${fundingUrl}`);

      const response = await axios.get(fundingUrl, { 
        timeout: 15000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      
      this.logger.log(`üì• BitGet: –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å ${response.status}`);
      this.logger.log(`üìÑ BitGet: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:`, {
        keys: Object.keys(response.data),
        code: response.data.code,
        msg: response.data.msg,
        dataLength: response.data.data?.length || 0
      });
      
      if (response.data.code !== '00000') {
        this.logger.error(`‚ùå BitGet: API –æ—à–∏–±–∫–∞ - –∫–æ–¥: ${response.data.code}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${response.data.msg}`);
        throw new Error(`BitGet API error: ${response.data.msg}`);
      }

      const fundingData = response.data.data;
      if (!Array.isArray(fundingData)) {
        this.logger.warn('‚ö†Ô∏è BitGet: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö funding');
        return {};
      }

      this.logger.log(`‚úÖ BitGet: –ü–æ–ª—É—á–µ–Ω–æ ${fundingData.length} funding –∑–∞–ø–∏—Å–µ–π`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      if (fundingData.length > 0) {
        this.logger.log('üîç BitGet: –ü–µ—Ä–≤—ã–µ 3 funding –∑–∞–ø–∏—Å–∏:', fundingData.slice(0, 3));
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const normalizedData = this.normalizeFundingData(fundingData);
      const tickers = Object.keys(normalizedData);
      
      this.logger.log(`üéØ BitGet: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tickers.length} —Ç–∏–∫–µ—Ä–æ–≤:`, tickers.slice(0, 10));
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (tickers.length > 0) {
        tickers.slice(0, 3).forEach(ticker => {
          const data = normalizedData[ticker];
          this.logger.log(`üìä BitGet ${ticker}:`, {
            fundingRate: (data.fundingRate * 100).toFixed(4) + '%',
            nextFunding: new Date(data.nextFundingTime).toLocaleString(),
            price: data.price // –±—É–¥–µ—Ç 1 –∫–∞–∫ placeholder
          });
        });
      } else {
        this.logger.warn('‚ö†Ô∏è BitGet: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞');
      }

      return normalizedData;
    } catch (error) {
      this.logger.error('‚ùå BitGet: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', {
        message: error.message,
        code: error.code,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        url: error.config?.url
      });
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
      this.logger.error('‚ùå BitGet: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      return {};
    }
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ funding rate API
   */
  private normalizeFundingData(fundingData: any[]): { [ticker: string]: NormalizedTicker } {
    const result: { [ticker: string]: NormalizedTicker } = {};

    fundingData.forEach((item, index) => {
      try {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const standardSymbol = this.convertBitgetSymbol(item.symbol);
        
        if (index < 3) {
          this.logger.log(`üîç BitGet: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${item.symbol} -> ${standardSymbol}`);
          this.logger.log(`üîç BitGet: –¥–∞–Ω–Ω—ã–µ:`, {
            fundingRate: item.fundingRate,
            nextUpdate: item.nextUpdate,
            fundingRateInterval: item.fundingRateInterval
          });
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT —Å–∏–º–≤–æ–ª—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if (
          standardSymbol &&
          standardSymbol.endsWith('USDT') &&
          this.isValidTicker(standardSymbol) &&
          item.fundingRate !== undefined &&
          item.nextUpdate
        ) {
          
          const fundingRate = parseFloat(item.fundingRate) || 0;
          const nextFundingTime = parseInt(item.nextUpdate);
          
          if (index < 3) {
            this.logger.log(`‚úÖ BitGet: –¥–æ–±–∞–≤–ª—è–µ–º ${standardSymbol} —Å fundingRate=${fundingRate}, nextUpdate=${nextFundingTime}`);
          }
          
          result[standardSymbol] = {
            ticker: standardSymbol,
            price: 1, // Placeholder - —Ü–µ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–µ
            fundingRate: fundingRate,
            nextFundingTime: nextFundingTime
          };
        } else if (index < 3) {
          this.logger.log(`‚ùå BitGet: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${item.symbol} - –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç`);
        }
      } catch (error) {
        this.logger.warn(`‚ö†Ô∏è BitGet: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ ${index}:`, error.message);
      }
    });

    this.logger.log(`üìä BitGet: –ù–∞–π–¥–µ–Ω–æ ${Object.keys(result).length} –≤–∞–ª–∏–¥–Ω—ã—Ö funding –∑–∞–ø–∏—Å–µ–π`);
    
    return result;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Bitget —Å–∏–º–≤–æ–ª –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   * XUSDT -> XUSDT (—É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
   * BTCUSDT -> BTCUSDT
   */
  private convertBitgetSymbol(bitgetSymbol: string): string | null {
    if (!bitgetSymbol) return null;

    // Bitget –≤ –Ω–æ–≤–æ–º API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if (bitgetSymbol.endsWith('USDT') && bitgetSymbol.length > 4) {
      return bitgetSymbol;
    }

    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–∏–∫–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ XXXUSDT
   */
  private isValidTicker(ticker: string): boolean {
    const regex = /^[A-Z0-9]+USDT$/;
    return regex.test(ticker) && ticker.length > 4;
  }
}
