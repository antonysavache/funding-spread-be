import { Injectable, Logger } from '@nestjs/common';
import axios from 'axios';
import { BingXAdapter } from '../adapters/bingx.adapter';
import { NormalizedTicker } from '../adapters/normalized-ticker.interface';

@Injectable()
export class BingXService {
  private readonly logger = new Logger(BingXService.name);
  private readonly baseUrl = 'https://open-api.bingx.com';

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å BingX –∏—Å–ø–æ–ª—å–∑—É—è –¥–≤–∞ endpoint:
   * - ticker –¥–ª—è —Ü–µ–Ω
   * - premiumIndex –¥–ª—è funding rates
   */
  async getFundingData(): Promise<{ [ticker: string]: NormalizedTicker }> {
    this.logger.log('üîÑ BingX: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É funding –¥–∞–Ω–Ω—ã—Ö...');

    try {
      // BingX API endpoints
      const tickersUrl = `${this.baseUrl}/openApi/swap/v2/quote/ticker`;
      
      this.logger.log(`üåê BingX: –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ ${tickersUrl}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã –¥–ª—è —Ü–µ–Ω
      const tickersResponse = await axios.get(tickersUrl, { 
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      
      this.logger.log(`üì• BingX: –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å ${tickersResponse.status}`);
      this.logger.log(`üìÑ BingX: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:`, {
        keys: Object.keys(tickersResponse.data),
        code: tickersResponse.data.code,
        msg: tickersResponse.data.msg,
        dataLength: tickersResponse.data.data?.length || 0
      });
      
      if (tickersResponse.data.code !== 0) {
        this.logger.error(`‚ùå BingX: API –æ—à–∏–±–∫–∞ - –∫–æ–¥: ${tickersResponse.data.code}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${tickersResponse.data.msg}`);
        throw new Error(`BingX API error: ${tickersResponse.data.msg}`);
      }

      this.logger.log(`‚úÖ BingX: –ü–æ–ª—É—á–µ–Ω–æ ${tickersResponse.data.data?.length || 0} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      if (tickersResponse.data.data && tickersResponse.data.data.length > 0) {
        this.logger.log('üîç BingX: –ü–µ—Ä–≤—ã–µ 3 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:', tickersResponse.data.data.slice(0, 3));
      }

      // –ü–æ–ª—É—á–∞–µ–º funding rates –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
      const fundingData = await this.getFundingRates();

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const normalizedData = BingXAdapter.normalizeWithFunding(tickersResponse.data, fundingData);
      const tickers = Object.keys(normalizedData);
      
      this.logger.log(`üîç BingX: –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª–æ–≤: ${tickers.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
      this.logger.log(`üéØ BingX: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tickers.length} —Ç–∏–∫–µ—Ä–æ–≤:`, tickers.slice(0, 10));
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (tickers.length > 0) {
        tickers.slice(0, 3).forEach(ticker => {
          const data = normalizedData[ticker];
          this.logger.log(`üìä BingX ${ticker}:`, {
            price: data.price,
            fundingRate: (data.fundingRate * 100).toFixed(4) + '%',
            nextFunding: new Date(data.nextFundingTime).toLocaleTimeString()
          });
        });
      }

      return normalizedData;
    } catch (error) {
      this.logger.error('‚ùå BingX: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', {
        message: error.message,
        code: error.code,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        url: error.config?.url
      });
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
      this.logger.error('‚ùå BingX: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç funding rates –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
   */
  private async getFundingRates(): Promise<{[symbol: string]: any}> {
    const popularSymbols = [
      'BTC-USDT', 'ETH-USDT', 'SOL-USDT', 'AVAX-USDT', 'ADA-USDT',
      'DOT-USDT', 'LINK-USDT', 'UNI-USDT', 'LTC-USDT', 'BCH-USDT',
      'XRP-USDT', 'TRX-USDT', 'ETC-USDT', 'ATOM-USDT', 'AAVE-USDT',
      'SUI-USDT', 'WIF-USDT', 'INJ-USDT', 'DOGE-USDT', 'NEAR-USDT',
      'FIL-USDT', 'MATIC-USDT', 'SHIB-USDT', 'ICP-USDT', 'APT-USDT',
      'OP-USDT', 'ARB-USDT', 'BNB-USDT', 'PEPE-USDT', 'FLOKI-USDT'
    ];

    this.logger.log(`üìä BingX: –ü–æ–ª—É—á–∞–µ–º funding rates –¥–ª—è ${popularSymbols.length} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤`);

    const fundingData: {[symbol: string]: any} = {};

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const fundingPromises = popularSymbols.map(async (symbol) => {
      try {
        const fundingUrl = `${this.baseUrl}/openApi/swap/v2/quote/premiumIndex?symbol=${symbol}`;
        
        const response = await axios.get(fundingUrl, {
          timeout: 5000,
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          }
        });

        if (response.data.code === 0 && response.data.data) {
          return { symbol, data: response.data.data };
        }
        return null;
      } catch (error) {
        this.logger.warn(`‚ö†Ô∏è BingX: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å funding rate –¥–ª—è ${symbol}: ${error.message}`);
        return null;
      }
    });

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const results = await Promise.allSettled(fundingPromises);
    
    results.forEach((result) => {
      if (result.status === 'fulfilled' && result.value) {
        fundingData[result.value.symbol] = result.value.data;
      }
    });

    this.logger.log(`‚úÖ BingX: –ü–æ–ª—É—á–µ–Ω–æ funding rates –¥–ª—è ${Object.keys(fundingData).length} —Å–∏–º–≤–æ–ª–æ–≤`);
    return fundingData;
  }
}
