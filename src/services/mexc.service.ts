import { Injectable } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { Observable, of } from 'rxjs';
import { map, catchError, timeout } from 'rxjs/operators';
import { MexcAdapter, MexcFundingResponse } from '../adapters/mexc.adapter';
import { NormalizedTicker } from '../adapters/normalized-ticker.interface';

@Injectable()
export class MexcService {
  private readonly baseUrl = 'https://api.mexc.com';
  private readonly fundingEndpoint = '/api/v3/premiumIndex';

  constructor(private readonly httpService: HttpService) {}

  getFundingData(): Observable<{ [ticker: string]: NormalizedTicker }> {
    console.log('üîÑ MEXC: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É funding –¥–∞–Ω–Ω—ã—Ö...');

    const url = `${this.baseUrl}${this.fundingEndpoint}`;

    return this.httpService.get<MexcFundingResponse[]>(url).pipe(
      timeout(10000),
      map(response => {
        console.log(`‚úÖ MEXC: –ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);

        const filteredData = MexcAdapter.filterUsdtPerpetuals(response.data);
        console.log(`üîç MEXC: –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª–æ–≤: ${filteredData.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);

        const normalized = MexcAdapter.normalize(filteredData);
        const tickers = Object.keys(normalized);
        
        console.log(`üéØ MEXC: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tickers.length} —Ç–∏–∫–µ—Ä–æ–≤`);
        
        tickers.slice(0, 3).forEach(ticker => {
          const data = normalized[ticker];
          console.log(`üìä MEXC ${ticker}:`, {
            price: data.price,
            fundingRate: (data.fundingRate * 100).toFixed(4) + '%',
            nextFunding: new Date(data.nextFundingTime).toLocaleTimeString()
          });
        });

        return normalized;
      }),
      catchError(error => {
        console.error('‚ùå MEXC: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        return of({});
      })
    );
  }

  checkApiHealth(): Observable<boolean> {
    console.log('üè• MEXC: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API...');

    const url = `${this.baseUrl}${this.fundingEndpoint}?symbol=BTCUSDT`;

    return this.httpService.get(url).pipe(
      timeout(5000),
      map(() => {
        console.log('‚úÖ MEXC: API –¥–æ—Å—Ç—É–ø–µ–Ω');
        return true;
      }),
      catchError(error => {
        console.error('‚ùå MEXC: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        return of(false);
      })
    );
  }
}
