import { Injectable } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { Observable, forkJoin, of } from 'rxjs';
import { map, catchError, timeout } from 'rxjs/operators';
import { BybitAdapter, BybitFundingResponse, BybitTickerResponse } from '../adapters/bybit.adapter';
import { NormalizedTicker } from '../adapters/normalized-ticker.interface';

@Injectable()
export class BybitService {
  private readonly baseUrl = 'https://api.bybit.com';
  private readonly fundingEndpoint = '/v5/market/funding/history';
  private readonly tickerEndpoint = '/v5/market/tickers';

  constructor(private readonly httpService: HttpService) {}

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ funding rates —Å Bybit
   */
  getFundingData(): Observable<{ [ticker: string]: NormalizedTicker }> {
    console.log('üîÑ Bybit: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É funding –¥–∞–Ω–Ω—ã—Ö...');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const funding$ = this.getFundingRates();
    const ticker$ = this.getTickerData();

    return forkJoin({
      funding: funding$,
      ticker: ticker$
    }).pipe(
      map(({ funding, ticker }) => {
        console.log(`‚úÖ Bybit: –ü–æ–ª—É—á–µ–Ω–æ ${funding.length} funding rates –∏ ${ticker.length} tickers`);

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª—ã
        const filteredFunding = BybitAdapter.filterUsdtPerpetuals(funding);
        const filteredTickers = BybitAdapter.filterUsdtPerpetuals(ticker);
        
        console.log(`üîç Bybit: –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª–æ–≤: ${filteredFunding.length} funding, ${filteredTickers.length} tickers`);

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const normalized = BybitAdapter.normalize(filteredFunding, filteredTickers);
        const tickers = Object.keys(normalized);
        
        console.log(`üéØ Bybit: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tickers.length} —Ç–∏–∫–µ—Ä–æ–≤:`, tickers.slice(0, 10));
        
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        tickers.slice(0, 3).forEach(ticker => {
          const data = normalized[ticker];
          console.log(`üìä Bybit ${ticker}:`, {
            price: data.price,
            fundingRate: (data.fundingRate * 100).toFixed(4) + '%',
            nextFunding: new Date(data.nextFundingTime).toLocaleTimeString()
          });
        });

        return normalized;
      }),
      catchError(error => {
        console.error('‚ùå Bybit: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Bybit API';
        
        if (error.response?.status === 429) {
          errorMessage = 'Bybit API: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤';
        } else if (error.response?.status >= 500) {
          errorMessage = 'Bybit API: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
        } else if (error.code === 'ECONNREFUSED') {
          errorMessage = 'Bybit API: –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é';
        }

        console.error(`üí• Bybit: ${errorMessage}`, error);
        return of({});
      })
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç funding rates –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  private getFundingRates(): Observable<any[]> {
    const url = `${this.baseUrl}${this.fundingEndpoint}?category=linear&limit=200`;

    return this.httpService.get<BybitFundingResponse>(url).pipe(
      timeout(10000),
      map(response => {
        if (BybitAdapter.isValidResponse(response.data)) {
          return response.data.result.list;
        } else {
          console.warn('Bybit: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç funding API:', response.data);
          return [];
        }
      }),
      catchError(error => {
        console.error('Bybit: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è funding rates:', error);
        return of([]);
      })
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç ticker –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  private getTickerData(): Observable<any[]> {
    const url = `${this.baseUrl}${this.tickerEndpoint}?category=linear`;

    return this.httpService.get<BybitTickerResponse>(url).pipe(
      timeout(10000),
      map(response => {
        if (BybitAdapter.isValidResponse(response.data)) {
          return response.data.result.list;
        } else {
          console.warn('Bybit: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç ticker API:', response.data);
          return [];
        }
      }),
      catchError(error => {
        console.error('Bybit: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ticker –¥–∞–Ω–Ω—ã—Ö:', error);
        return of([]);
      })
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Bybit
   */
  checkApiHealth(): Observable<boolean> {
    console.log('üè• Bybit: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API...');

    const url = `${this.baseUrl}${this.tickerEndpoint}?category=linear&symbol=BTCUSDT`;

    return this.httpService.get(url).pipe(
      timeout(5000),
      map(() => {
        console.log('‚úÖ Bybit: API –¥–æ—Å—Ç—É–ø–µ–Ω');
        return true;
      }),
      catchError(error => {
        console.error('‚ùå Bybit: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        return of(false);
      })
    );
  }
}
