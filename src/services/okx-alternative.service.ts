import { Injectable, Logger } from '@nestjs/common';
import axios from 'axios';
import { OKXAdapter } from '../adapters/okx.adapter';
import { NormalizedTicker } from '../adapters/normalized-ticker.interface';

@Injectable()
export class OKXAlternativeService {
  private readonly logger = new Logger(OKXAlternativeService.name);
  private readonly baseUrl = 'https://www.okx.com';

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ USDT –ø–∞—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ funding rates
  private readonly popularPairs = [
    'BTC-USDT-SWAP', 'ETH-USDT-SWAP', 'XRP-USDT-SWAP', 'ADA-USDT-SWAP', 'SOL-USDT-SWAP',
    'DOT-USDT-SWAP', 'AVAX-USDT-SWAP', 'LINK-USDT-SWAP', 'UNI-USDT-SWAP', 'LTC-USDT-SWAP',
    'BCH-USDT-SWAP', 'ETC-USDT-SWAP', 'TRX-USDT-SWAP', 'ATOM-USDT-SWAP', 'ICP-USDT-SWAP'
  ];

  /**
   * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö OKX —Å funding rates –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
   */
  async getFundingData(): Promise<{ [ticker: string]: NormalizedTicker }> {
    this.logger.log('üîÑ OKX Alternative: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É funding –¥–∞–Ω–Ω—ã—Ö...');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –¥–ª—è —Ü–µ–Ω
      const tickersUrl = `${this.baseUrl}/api/v5/market/tickers?instType=SWAP`;
      
      this.logger.log(`üåê OKX: –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã –æ—Ç ${tickersUrl}`);
      
      const tickersResponse = await axios.get(tickersUrl, { 
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      // –ü–æ–ª—É—á–∞–µ–º funding rates –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä –ø–æ—Ä—Ü–∏—è–º–∏
      const fundingData: any[] = [];
      const batchSize = 5; // –ú–∞–∫—Å–∏–º—É–º 5 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å
      
      for (let i = 0; i < this.popularPairs.length; i += batchSize) {
        const batch = this.popularPairs.slice(i, i + batchSize);
        const instIds = batch.join(',');
        
        const fundingUrl = `${this.baseUrl}/api/v5/public/funding-rate?instId=${instIds}`;
        this.logger.log(`üåê OKX: –ü–æ–ª—É—á–∞–µ–º funding rates –¥–ª—è ${batch.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
        
        try {
          const fundingResponse = await axios.get(fundingUrl, {
            timeout: 10000,
            headers: {
              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
          });
          
          if (fundingResponse.data.code === '0' && fundingResponse.data.data) {
            fundingData.push(...fundingResponse.data.data);
            this.logger.log(`‚úÖ OKX: –ü–æ–ª—É—á–µ–Ω–æ ${fundingResponse.data.data.length} funding rates –¥–ª—è batch ${i/batchSize + 1}`);
          }
        } catch (error) {
          this.logger.warn(`‚ö†Ô∏è OKX: –û—à–∏–±–∫–∞ –¥–ª—è batch ${i/batchSize + 1}: ${error.message}`);
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      }

      this.logger.log(`üìä OKX: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ funding rates: ${fundingData.length}`);
      this.logger.log(`üìä OKX: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ä–æ–≤: ${tickersResponse.data.data?.length || 0}`);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const combinedFundingResponse = {
        code: '0',
        msg: '',
        data: fundingData
      };

      const normalizedData = OKXAdapter.normalizeFundingRates(combinedFundingResponse, tickersResponse.data);
      const tickers = Object.keys(normalizedData);
      
      this.logger.log(`üéØ OKX Alternative: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tickers.length} —Ç–∏–∫–µ—Ä–æ–≤:`, tickers.slice(0, 10));
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (tickers.length > 0) {
        tickers.slice(0, 3).forEach(ticker => {
          const data = normalizedData[ticker];
          this.logger.log(`üìä OKX ${ticker}:`, {
            price: data.price,
            fundingRate: (data.fundingRate * 100).toFixed(4) + '%',
            nextFunding: new Date(data.nextFundingTime).toLocaleTimeString()
          });
        });
      }

      return normalizedData;
    } catch (error) {
      this.logger.error('‚ùå OKX Alternative: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', {
        message: error.message,
        code: error.code,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        url: error.config?.url
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      this.logger.log('üß™ OKX Alternative: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      
      const mockData: { [ticker: string]: NormalizedTicker } = {
        'BTCUSDT': {
          ticker: 'BTCUSDT',
          price: 43200.5,
          fundingRate: 0.0002,
          nextFundingTime: Date.now() + 5 * 60 * 60 * 1000
        }
      };
      
      return mockData;
    }
  }
}
