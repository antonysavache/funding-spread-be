import { Injectable, HttpException, HttpStatus } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { Observable, forkJoin, of } from 'rxjs';
import { map, catchError, timeout } from 'rxjs/operators';
import { BinanceAdapter } from '../adapters/binance.adapter';
import { NormalizedTicker } from '../adapters/normalized-ticker.interface';

@Injectable()
export class BinanceService {
  private readonly baseUrl = 'https://fapi.binance.com';
  private readonly exchangeInfoEndpoint = '/fapi/v1/exchangeInfo';
  private readonly premiumIndexEndpoint = '/fapi/v1/premiumIndex';

  constructor(private readonly httpService: HttpService) {}

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ funding rates —Å Binance
   */
  getFundingData(): Observable<{ [ticker: string]: NormalizedTicker }> {
    console.log('üîÑ Binance: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É funding –¥–∞–Ω–Ω—ã—Ö...');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const exchangeInfo$ = this.getExchangeInfo();
    const premiumIndex$ = this.getPremiumIndex();

    return forkJoin({
      exchangeInfo: exchangeInfo$,
      premiumIndex: premiumIndex$
    }).pipe(
      map(({ exchangeInfo, premiumIndex }) => {
        console.log(`‚úÖ Binance: –ü–æ–ª—É—á–µ–Ω–æ ${exchangeInfo.symbols.length} —Å–∏–º–≤–æ–ª–æ–≤ –∏ ${premiumIndex.length} premium indices`);

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const normalized = BinanceAdapter.normalize(exchangeInfo, premiumIndex);
        const tickers = Object.keys(normalized);
        
        console.log(`üéØ Binance: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tickers.length} —Ç–∏–∫–µ—Ä–æ–≤:`, tickers.slice(0, 10));
        
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        tickers.slice(0, 3).forEach(ticker => {
          const data = normalized[ticker];
          console.log(`üìä Binance ${ticker}:`, {
            price: data.price,
            fundingRate: (data.fundingRate * 100).toFixed(4) + '%',
            nextFunding: new Date(data.nextFundingTime).toLocaleTimeString()
          });
        });

        return normalized;
      }),
      catchError(error => {
        console.error('‚ùå Binance: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Binance API';
        
        if (error.response?.status === 429) {
          errorMessage = 'Binance API: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤';
        } else if (error.response?.status >= 500) {
          errorMessage = 'Binance API: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
        } else if (error.code === 'ECONNREFUSED') {
          errorMessage = 'Binance API: –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é';
        }

        console.error(`üí• Binance: ${errorMessage}`, error);
        return of({});
      })
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–∞—Ö
   */
  private getExchangeInfo(): Observable<any> {
    const url = `${this.baseUrl}${this.exchangeInfoEndpoint}`;

    return this.httpService.get(url).pipe(
      timeout(10000),
      map(response => response.data),
      catchError(error => {
        console.error('Binance: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è exchange info:', error);
        throw new HttpException('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Binance', HttpStatus.SERVICE_UNAVAILABLE);
      })
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç premium index –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  private getPremiumIndex(): Observable<any> {
    const url = `${this.baseUrl}${this.premiumIndexEndpoint}`;

    return this.httpService.get(url).pipe(
      timeout(10000),
      map(response => response.data),
      catchError(error => {
        console.error('Binance: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è premium index:', error);
        throw new HttpException('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è funding –¥–∞–Ω–Ω—ã—Ö —Å Binance', HttpStatus.SERVICE_UNAVAILABLE);
      })
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Binance
   */
  checkApiHealth(): Observable<boolean> {
    console.log('üè• Binance: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API...');

    const url = `${this.baseUrl}${this.exchangeInfoEndpoint}`;

    return this.httpService.get(url).pipe(
      timeout(5000),
      map(() => {
        console.log('‚úÖ Binance: API –¥–æ—Å—Ç—É–ø–µ–Ω');
        return true;
      }),
      catchError(error => {
        console.error('‚ùå Binance: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        return of(false);
      })
    );
  }
}
