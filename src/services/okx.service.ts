import { Injectable, Logger } from '@nestjs/common';
import axios from 'axios';
import { OKXAdapter } from '../adapters/okx.adapter';
import { NormalizedTicker } from '../adapters/normalized-ticker.interface';

@Injectable()
export class OKXService {
  private readonly logger = new Logger(OKXService.name);
  private readonly baseUrl = 'https://www.okx.com';

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å OKX –¥–ª—è –≤—Å–µ—Ö USDT-SWAP –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
   * –ü–æ–ª—É—á–∞–µ—Ç funding rates –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
   */
  async getFundingData(): Promise<{ [ticker: string]: NormalizedTicker }> {
    this.logger.log('üîÑ OKX: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É funding –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤...');

    try {
      // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ SWAP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      const allInstruments = await this.getAllSwapInstruments();
      
      if (allInstruments.length === 0) {
        this.logger.warn('‚ö†Ô∏è OKX: –ù–µ –Ω–∞–π–¥–µ–Ω–æ SWAP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
        return {};
      }

      this.logger.log(`üìä OKX: –ù–∞–π–¥–µ–Ω–æ ${allInstruments.length} SWAP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);

      // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º funding rates –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      const fundingData = await this.getFundingRatesForAll(allInstruments);

      // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º mark prices –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      const markPrices = await this.getMarkPrices();

      // –®–∞–≥ 4: –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const normalizedData = OKXAdapter.normalizeMarkPriceWithFunding(
        { code: '0', msg: '', data: markPrices },
        fundingData
      );

      const tickers = Object.keys(normalizedData);
      this.logger.log(`üéØ OKX: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tickers.length} —Ç–∏–∫–µ—Ä–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ funding rates`);
      
      // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ funding rates
      if (tickers.length > 0) {
        tickers.slice(0, 5).forEach(ticker => {
          const data = normalizedData[ticker];
          this.logger.log(`üìä OKX ${ticker}: rate=${(data.fundingRate * 100).toFixed(4)}%, price=${data.price}`);
        });
      }

      return normalizedData;

    } catch (error) {
      this.logger.error('‚ùå OKX: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ SWAP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
   */
  private async getAllSwapInstruments(): Promise<string[]> {
    try {
      const url = `${this.baseUrl}/api/v5/public/instruments?instType=SWAP`;
      
      this.logger.log('üåê OKX: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö SWAP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...');
      
      const response = await axios.get(url, { 
        timeout: 15000,
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      
      if (response.data.code !== '0') {
        throw new Error(`OKX Instruments API error: ${response.data.msg}`);
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT SWAP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      const usdtInstruments = response.data.data
        .filter((inst: any) => inst.instId && inst.instId.includes('USDT-SWAP'))
        .map((inst: any) => inst.instId);

      this.logger.log(`‚úÖ OKX: –ù–∞–π–¥–µ–Ω–æ ${usdtInstruments.length} USDT-SWAP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
      
      return usdtInstruments;

    } catch (error) {
      this.logger.error('‚ùå OKX: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç funding rates –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É
   */
  private async getFundingRatesForAll(allInstIds: string[]): Promise<{[instId: string]: any}> {
    const fundingData: {[instId: string]: any} = {};
    const total = allInstIds.length;
    const delay = 50; // 50ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (20 req/sec - –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞ 20 req/2sec)

    this.logger.log(`üì¶ OKX: –ü–æ–ª—É—á–∞–µ–º funding rates –¥–ª—è ${total} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É...`);

    for (let i = 0; i < allInstIds.length; i++) {
      const instId = allInstIds[i];
      const progress = Math.round((i / total) * 100);
      
      try {
        const url = `${this.baseUrl}/api/v5/public/funding-rate?instId=${instId}`;

        if (i % 20 === 0) {
          this.logger.log(`üîÑ OKX: ${progress}% - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${instId} (${i + 1}/${total})`);
        }

        const response = await axios.get(url, {
          timeout: 8000,
          headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          }
        });

        if (response.data.code === '0' && response.data.data && response.data.data.length > 0) {
          fundingData[instId] = response.data.data[0];
        } else {
          this.logger.warn(`‚ö†Ô∏è OKX: ${instId} - –∫–æ–¥ ${response.data.code}: ${response.data.msg}`);
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if (i < total - 1) {
          await this.delay(delay);
        }

      } catch (error) {
        this.logger.warn(`‚ö†Ô∏è OKX: –û—à–∏–±–∫–∞ –¥–ª—è ${instId}: ${error.message}`);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ rate limit
        if (error.response?.status === 429) {
          this.logger.warn(`üö´ OKX: Rate limit –¥–ª—è ${instId}, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É...`);
          await this.delay(500);
        }
      }
    }

    const totalReceived = Object.keys(fundingData).length;
    this.logger.log(`üìä OKX: –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ funding rates –¥–ª—è ${totalReceived} –∏–∑ ${total} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
    
    return fundingData;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç mark prices –¥–ª—è –≤—Å–µ—Ö SWAP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  private async getMarkPrices(): Promise<any[]> {
    try {
      const url = `${this.baseUrl}/api/v5/public/mark-price?instType=SWAP`;
      
      this.logger.log('üåê OKX: –ü–æ–ª—É—á–∞–µ–º mark prices –¥–ª—è –≤—Å–µ—Ö SWAP...');
      
      const response = await axios.get(url, { 
        timeout: 15000,
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      
      if (response.data.code !== '0') {
        throw new Error(`OKX Mark Price API error: ${response.data.msg}`);
      }

      const markPrices = response.data.data || [];
      this.logger.log(`‚úÖ OKX: –ü–æ–ª—É—á–µ–Ω–æ ${markPrices.length} mark prices`);
      
      return markPrices;

    } catch (error) {
      this.logger.error('‚ùå OKX: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ mark prices:', error.message);
      return [];
    }
  }

  /**
   * –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ tickers endpoint (–±—ã—Å—Ç—Ä—ã–π, –Ω–æ funding rates = 0)
   */
  async getFundingDataAlternative(): Promise<{ [ticker: string]: NormalizedTicker }> {
    this.logger.log('üîÑ OKX Alternative: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ tickers endpoint...');

    try {
      const url = `${this.baseUrl}/api/v5/market/tickers?instType=SWAP`;
      
      const response = await axios.get(url, { 
        timeout: 15000,
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      if (response.data.code !== '0') {
        throw new Error(`OKX Tickers API error: ${response.data.msg}`);
      }

      this.logger.log(`üìä OKX Alternative: –ü–æ–ª—É—á–µ–Ω–æ ${response.data.data?.length || 0} —Ç–∏–∫–µ—Ä–æ–≤`);

      const normalizedData = OKXAdapter.normalize(response.data);
      const tickers = Object.keys(normalizedData);
      
      this.logger.log(`üéØ OKX Alternative: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tickers.length} —Ç–∏–∫–µ—Ä–æ–≤`);
      
      return normalizedData;

    } catch (error) {
      this.logger.error('‚ùå OKX Alternative: –û—à–∏–±–∫–∞:', error.message);
      return {};
    }
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ funding –¥–ª—è OKX (–∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤: 00:00, 08:00, 16:00 UTC)
   */
  private static calculateNextFundingTime(): number {
    const now = new Date();
    const currentHour = now.getUTCHours();
    let nextFundingHour: number;

    if (currentHour < 8) {
      nextFundingHour = 8;
    } else if (currentHour < 16) {
      nextFundingHour = 16;
    } else {
      nextFundingHour = 24; // 00:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
    }

    const nextFundingTime = new Date(now);
    nextFundingTime.setUTCHours(nextFundingHour % 24, 0, 0, 0);
    if (nextFundingHour === 24) {
      nextFundingTime.setUTCDate(nextFundingTime.getUTCDate() + 1);
    }

    return nextFundingTime.getTime();
  }
}
