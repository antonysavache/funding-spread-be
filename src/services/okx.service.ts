import { Injectable, Logger } from '@nestjs/common';
import axios from 'axios';
import { OKXAdapter } from '../adapters/okx.adapter';
import { NormalizedTicker } from '../adapters/normalized-ticker.interface';

@Injectable()
export class OKXService {
  private readonly logger = new Logger(OKXService.name);
  private readonly baseUrl = 'https://www.okx.com';

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å OKX –∏—Å–ø–æ–ª—å–∑—É—è API v5
   * –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∑–∞—Ç–µ–º funding rates –¥–ª—è –≤—Å–µ—Ö USDT-SWAP
   */
  async getFundingData(): Promise<{ [ticker: string]: NormalizedTicker }> {
    this.logger.log('üîÑ OKX: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É funding –¥–∞–Ω–Ω—ã—Ö...');

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã SWAP
      const instrumentsUrl = `${this.baseUrl}/api/v5/public/instruments?instType=SWAP`;
      
      this.logger.log(`üåê OKX: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—Ç ${instrumentsUrl}`);
      
      const instrumentsResponse = await axios.get(instrumentsUrl, { 
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      
      if (instrumentsResponse.data.code !== '0') {
        throw new Error(`OKX Instruments API error: ${instrumentsResponse.data.msg}`);
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT SWAP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      const usdtInstruments = instrumentsResponse.data.data.filter((inst: any) => 
        inst.instId && inst.instId.includes('USDT-SWAP')
      );

      this.logger.log(`‚úÖ OKX: –ù–∞–π–¥–µ–Ω–æ ${usdtInstruments.length} USDT-SWAP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);

      // –ü–æ–ª—É—á–∞–µ–º mark prices –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      const markPriceUrl = `${this.baseUrl}/api/v5/public/mark-price?instType=SWAP`;
      const markPriceResponse = await axios.get(markPriceUrl, { 
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      if (markPriceResponse.data.code !== '0') {
        throw new Error(`OKX Mark Price API error: ${markPriceResponse.data.msg}`);
      }

      this.logger.log(`‚úÖ OKX: –ü–æ–ª—É—á–µ–Ω–æ ${markPriceResponse.data.data?.length || 0} mark prices`);

      // –ü–æ–ª—É—á–∞–µ–º funding rates –¥–ª—è –≤—Å–µ—Ö USDT –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Ä—Ü–∏—è–º–∏
      const fundingData = await this.getFundingRatesForAll(usdtInstruments.map((inst: any) => inst.instId));

      const normalizedData = OKXAdapter.normalizeMarkPriceWithFunding(markPriceResponse.data, fundingData);
      const tickers = Object.keys(normalizedData);
      
      this.logger.log(`üéØ OKX: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tickers.length} —Ç–∏–∫–µ—Ä–æ–≤`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (tickers.length > 0) {
        tickers.slice(0, 3).forEach(ticker => {
          const data = normalizedData[ticker];
          this.logger.log(`üìä OKX ${ticker}:`, {
            price: data.price,
            fundingRate: (data.fundingRate * 100).toFixed(4) + '%',
            nextFunding: new Date(data.nextFundingTime).toLocaleTimeString()
          });
        });
      }

      return normalizedData;
    } catch (error) {
      this.logger.error('‚ùå OKX: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', {
        message: error.message,
        code: error.code,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        url: error.config?.url
      });
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
      this.logger.error('‚ùå OKX: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç funding rates –¥–ª—è –≤—Å–µ—Ö USDT –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  private async getFundingRatesForAll(allInstIds: string[]): Promise<{[instId: string]: any}> {
    const fundingData: {[instId: string]: any} = {};
    const batchSize = 5; // –ú–∞–∫—Å–∏–º—É–º 5 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞ —Ä–∞–∑
    const totalBatches = Math.ceil(allInstIds.length / batchSize);

    this.logger.log(`üìä OKX: –ü–æ–ª—É—á–∞–µ–º funding rates –¥–ª—è ${allInstIds.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ ${totalBatches} –±–∞—Ç—á–∞—Ö`);

    for (let i = 0; i < allInstIds.length; i += batchSize) {
      try {
        const batch = allInstIds.slice(i, i + batchSize);
        const instIds = batch.join(',');
        
        const fundingUrl = `${this.baseUrl}/api/v5/public/funding-rate?instId=${instIds}`;

        const response = await axios.get(fundingUrl, {
          timeout: 5000,
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          }
        });

        if (response.data.code === '0' && response.data.data) {
          response.data.data.forEach((item: any) => {
            fundingData[item.instId] = item;
          });
        }

        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        if ((i / batchSize + 1) % 10 === 0) {
          this.logger.log(`üìà OKX: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i / batchSize + 1}/${totalBatches} –±–∞—Ç—á–µ–π`);
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        this.logger.warn(`‚ö†Ô∏è OKX: –û—à–∏–±–∫–∞ –¥–ª—è batch ${i/batchSize + 1}: ${error.message}`);
      }
    }

    this.logger.log(`‚úÖ OKX: –ü–æ–ª—É—á–µ–Ω–æ funding rates –¥–ª—è ${Object.keys(fundingData).length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
    return fundingData;
  }
}
