import { Injectable, Logger } from '@nestjs/common';
import { Observable, from, of } from 'rxjs';
import { map, catchError, timeout } from 'rxjs/operators';
import axios from 'axios';
import { KrakenAdapter } from '../adapters/kraken.adapter';
import { NormalizedTicker } from '../adapters/normalized-ticker.interface';

@Injectable()
export class KrakenService {
  private readonly logger = new Logger(KrakenService.name);
  private readonly baseUrl = 'https://futures.kraken.com';
  private readonly tickersEndpoint = '/derivatives/api/v3/tickers';

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ funding rates —Å Kraken Futures
   */
  getFundingData(): Observable<{ [ticker: string]: NormalizedTicker }> {
    this.logger.log('üîÑ Kraken: –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ funding rates...');

    const url = `${this.baseUrl}${this.tickersEndpoint}`;

    return from(axios.get(url)).pipe(
      timeout(15000), // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è Kraken
      map(response => {
        const data = response.data;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        if (!KrakenAdapter.isValidResponse(data)) {
          this.logger.error('‚ùå Kraken: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API', data);
          return {};
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const normalized = KrakenAdapter.normalize(data);
        const tickers = Object.keys(normalized);
        
        this.logger.log(`‚úÖ Kraken: –ü–æ–ª—É—á–µ–Ω–æ ${tickers.length} perpetual –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤`);

        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (tickers.length > 0) {
          tickers.slice(0, 3).forEach(ticker => {
            const tickerData = normalized[ticker];
            this.logger.log(
              `üìä Kraken: ${ticker} | –¶–µ–Ω–∞: $${tickerData.price.toFixed(2)} | ` +
              `Funding: ${(tickerData.fundingRate * 100).toFixed(6)}% | ` +
              `–°–ª–µ–¥—É—é—â–∞—è –≤—ã–ø–ª–∞—Ç–∞: ${new Date(tickerData.nextFundingTime).toISOString()}`
            );
          });
        }

        return normalized;
      }),
      catchError(error => {
        this.logger.error('‚ùå Kraken: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        if (error.response) {
          this.logger.error(`HTTP ${error.response.status}: ${error.response.statusText}`);
          if (error.response.data) {
            this.logger.error('–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response.data);
          }
        }
        
        return of({});
      })
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  getInstruments(): Observable<any> {
    const url = `${this.baseUrl}/derivatives/api/v3/instruments`;

    return from(axios.get(url)).pipe(
      timeout(10000),
      map(response => response.data),
      catchError(error => {
        this.logger.error('Kraken: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', error);
        return of({ instruments: [] });
      })
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Kraken Futures
   */
  checkApiHealth(): Observable<boolean> {
    this.logger.log('üîç Kraken: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...');

    const url = `${this.baseUrl}${this.tickersEndpoint}`;

    return from(axios.get(url)).pipe(
      timeout(10000),
      map(response => {
        const isHealthy = response.status === 200 && 
                         response.data && 
                         KrakenAdapter.isValidResponse(response.data);
        
        if (isHealthy) {
          this.logger.log('‚úÖ Kraken: API –¥–æ—Å—Ç—É–ø–µ–Ω');
        } else {
          this.logger.warn('‚ö†Ô∏è Kraken: API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
        }
        
        return isHealthy;
      }),
      catchError(error => {
        this.logger.error('‚ùå Kraken: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        return of(false);
      })
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ funding rates –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
   */
  getHistoricalFundingRates(symbol: string): Observable<any> {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç Kraken
    const krakenSymbol = this.convertToKrakenSymbol(symbol);
    const url = `${this.baseUrl}/derivatives/api/v3/historicalfundingrates`;

    return from(axios.get(url, { 
      params: { symbol: krakenSymbol } 
    })).pipe(
      timeout(10000),
      map(response => response.data),
      catchError(error => {
        this.logger.error(`Kraken: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}:`, error);
        return of({ rates: [] });
      })
    );
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç Kraken
   */
  private convertToKrakenSymbol(symbol: string): string {
    if (symbol.endsWith('USDT')) {
      const base = symbol.replace('USDT', '');
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BTC –≤ XBT –¥–ª—è Kraken
      const krakenBase = base === 'BTC' ? 'XBT' : base;
      return `PF_${krakenBase}USD`;
    }
    return symbol;
  }
}
