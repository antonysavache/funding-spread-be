import { Injectable, Logger } from '@nestjs/common';
import { Observable, forkJoin, of } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { BinanceService } from './binance.service';
import { BybitService } from './bybit.service';
import { BitGetService } from './bitget.service';
import { BingXService } from './bingx.service';
import { BitMEXService } from './bitmex.service';
import { OKXService } from './okx.service';
import { NormalizedTicker } from '../adapters/normalized-ticker.interface';

export interface AggregatedNormalizedData {
  binance: { [ticker: string]: NormalizedTicker };
  bybit: { [ticker: string]: NormalizedTicker };
  bitget: { [ticker: string]: NormalizedTicker };
  bingx: { [ticker: string]: NormalizedTicker };
  bitmex: { [ticker: string]: NormalizedTicker };
  okx: { [ticker: string]: NormalizedTicker };
}

@Injectable()
export class ExchangeAggregatorService {
  private readonly logger = new Logger(ExchangeAggregatorService.name);

  constructor(
    private binanceService: BinanceService,
    private bybitService: BybitService,
    private bitgetService: BitGetService,
    private bingxService: BingXService,
    private bitmexService: BitMEXService,
    private okxService: OKXService,
  ) {}

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö –±–∏—Ä–∂
   */
  getAllNormalizedData(): Observable<AggregatedNormalizedData> {
    console.log('üöÄ ExchangeAggregator: –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ—Ö –±–∏—Ä–∂...');
    
    return forkJoin({
      binance: this.binanceService.getFundingData().pipe(
        catchError(error => {
          console.error('‚ùå ExchangeAggregator: Binance –æ—à–∏–±–∫–∞:', error.message);
          return of({});
        })
      ),
      bybit: this.bybitService.getFundingData().pipe(
        catchError(error => {
          console.error('‚ùå ExchangeAggregator: Bybit –æ—à–∏–±–∫–∞:', error.message);
          return of({});
        })
      ),
      bitget: this.convertToObservable(this.bitgetService.getFundingData()).pipe(
        catchError(error => {
          console.error('‚ùå ExchangeAggregator: BitGet –æ—à–∏–±–∫–∞:', error.message);
          return of({});
        })
      ),
      bingx: this.convertToObservable(this.bingxService.getFundingData()).pipe(
        catchError(error => {
          console.error('‚ùå ExchangeAggregator: BingX –æ—à–∏–±–∫–∞:', error.message);
          return of({});
        })
      ),
      bitmex: this.convertToObservable(this.bitmexService.getFundingData()).pipe(
        catchError(error => {
          console.error('‚ùå ExchangeAggregator: BitMEX –æ—à–∏–±–∫–∞:', error.message);
          return of({});
        })
      ),
      okx: this.convertToObservable(this.okxService.getFundingData()).pipe(
        catchError(error => {
          console.error('‚ùå ExchangeAggregator: OKX –æ—à–∏–±–∫–∞:', error.message);
          return of({});
        })
      )
    }).pipe(
      map(results => {
        console.log('üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–ò–†–ñ–ê–ú:');
        console.log(`üîµ Binance: ${Object.keys(results.binance).length} —Ç–∏–∫–µ—Ä–æ–≤`, Object.keys(results.binance).slice(0, 3));
        console.log(`üü° Bybit: ${Object.keys(results.bybit).length} —Ç–∏–∫–µ—Ä–æ–≤`, Object.keys(results.bybit).slice(0, 3));
        console.log(`üü¢ BitGet: ${Object.keys(results.bitget).length} —Ç–∏–∫–µ—Ä–æ–≤`, Object.keys(results.bitget).slice(0, 3));
        console.log(`üü† BingX: ${Object.keys(results.bingx).length} —Ç–∏–∫–µ—Ä–æ–≤`, Object.keys(results.bingx).slice(0, 3));
        console.log(`üî¥ BitMEX: ${Object.keys(results.bitmex).length} —Ç–∏–∫–µ—Ä–æ–≤`, Object.keys(results.bitmex).slice(0, 3));
        console.log(`üü£ OKX: ${Object.keys(results.okx).length} —Ç–∏–∫–µ—Ä–æ–≤`, Object.keys(results.okx).slice(0, 3));
        console.log('===========================================');

        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
        if (Object.keys(results.binance).length > 0) {
          const sampleTicker = Object.keys(results.binance)[0];
          console.log(`üíé Binance sample (${sampleTicker}):`, results.binance[sampleTicker]);
        } else {
          console.log('‚ö†Ô∏è Binance: –ù–ï–¢ –î–ê–ù–ù–´–• - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É...');
        }

        if (Object.keys(results.bybit).length > 0) {
          const sampleTicker = Object.keys(results.bybit)[0];
          console.log(`üíé Bybit sample (${sampleTicker}):`, results.bybit[sampleTicker]);
        } else {
          console.log('‚ö†Ô∏è Bybit: –ù–ï–¢ –î–ê–ù–ù–´–• - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É...');
        }

        return results;
      })
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
   */
  getArbitrageOpportunities(minDelta: number = 0.001): Observable<any[]> {
    return this.getAllNormalizedData().pipe(
      map(data => {
        const opportunities: any[] = [];
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
        const allTickers = new Set<string>();
        Object.values(data).forEach(exchangeData => {
          Object.keys(exchangeData).forEach(ticker => allTickers.add(ticker));
        });

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–∫–µ—Ä –Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        allTickers.forEach(ticker => {
          const rates: { exchange: string; rate: number }[] = [];
          
          Object.entries(data).forEach(([exchange, exchangeData]) => {
            if (exchangeData[ticker]) {
              rates.push({
                exchange,
                rate: exchangeData[ticker].fundingRate
              });
            }
          });

          if (rates.length >= 2) {
            const minRate = Math.min(...rates.map(r => r.rate));
            const maxRate = Math.max(...rates.map(r => r.rate));
            const delta = maxRate - minRate;

            if (delta >= minDelta) {
              opportunities.push({
                ticker,
                delta,
                longExchange: rates.find(r => r.rate === minRate)!.exchange,
                shortExchange: rates.find(r => r.rate === maxRate)!.exchange,
                longRate: minRate,
                shortRate: maxRate,
                exchanges: rates.length
              });
            }
          }
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–µ–ª—å—Ç—ã
        return opportunities.sort((a, b) => b.delta - a.delta);
      })
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–∫–µ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–ª–∞—Ç
   */
  getDifferentPayoutTimes(): Observable<any[]> {
    return this.getAllNormalizedData().pipe(
      map(data => {
        const result: any[] = [];

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
        const allTickers = new Set<string>();
        Object.values(data).forEach(exchangeData => {
          Object.keys(exchangeData).forEach(ticker => allTickers.add(ticker));
        });

        allTickers.forEach(ticker => {
          const times: { exchange: string; time: number }[] = [];
          
          Object.entries(data).forEach(([exchange, exchangeData]) => {
            if (exchangeData[ticker]) {
              times.push({
                exchange,
                time: exchangeData[ticker].nextFundingTime
              });
            }
          });

          if (times.length >= 2) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—Ç–ª–∏—á–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 1 —á–∞—Å
            const uniqueTimes = new Set(times.map(t => Math.floor(t.time / (60 * 60 * 1000))));
            if (uniqueTimes.size > 1) {
              result.push({
                ticker,
                exchanges: times.map(t => ({
                  exchange: t.exchange,
                  nextFundingTime: t.time
                }))
              });
            }
          }
        });

        return result;
      })
    );
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Promise –≤ Observable –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  private convertToObservable<T>(promise: Promise<T>): Observable<T> {
    return new Observable(subscriber => {
      promise
        .then(value => {
          subscriber.next(value);
          subscriber.complete();
        })
        .catch(error => {
          subscriber.error(error);
        });
    });
  }
}
